name: Promote to prod

on: 
  workflow_dispatch:
  release:
    types: [published]
    
env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: civictechjobs-fullstack-stage
  ECS_SERVICE: civictechjobs-fullstack-stage
  ECS_CLUSTER: incubator-prod
  ECS_TASK_DEFINITION: ./aws/task-definition.json
  ECS_FAMILY: civictechjobs-fullstack-stage
  ECS_TASK_ROLE_ARN: incubator-prod-ecs-task-role
  ECS_EXECUTION_ROLE_ARN: incubator-prod-ecs-task-role

  DB_HOST: 34.132.106.11
  DB_NAME: my-test-db
  DB_PORT: 5432

  CONTAINER_NAME: civictechjobs-fullstack-stage

  ENVIRON: stage

permissions:
  contents: read

jobs:
  deploy:
    name: Promote existing build to prod ECS
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Fill in templated fields of ECS task definition
      id: task-def-update
      run: |
        sed -i "s/<FAMILY>/${{ env.ECS_FAMILY }}/g" ${{ env.ECS_TASK_DEFINITION }}
        sed -i "s/<TASK_ROLE_ARN>/${{ env.ECS_TASK_ROLE_ARN }}/g" ${{ env.ECS_TASK_DEFINITION }}
        sed -i "s/<EXECUTION_ROLE_ARN>/${{ env.ECS_EXECUTION_ROLE_ARN }}/g" ${{ env.ECS_TASK_DEFINITION }}
        sed -i "s/<ECS_SERVICE>/${{ env.ECS_SERVICE }}/g" ${{ env.ECS_TASK_DEFINITION }}
        sed -i "s/<CONTAINER_NAME>/${{ env.CONTAINER_NAME }}/g" ${{ env.ECS_TASK_DEFINITION }}

    - name: Further update ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        environment-variables: |
          DATABASE=postgres
          DB_ENGINE=django.db.backends.postgresql
          DB_HOST=${{ env.DB_HOST }}
          DB_NAME=${{ env.DB_NAME }}
          DB_PORT=${{ env.DB_PORT }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          ENVIRON=${{ env.ENVIRON }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
