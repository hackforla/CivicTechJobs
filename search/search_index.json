{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Civictechjobs.org Wiki!","text":"<p>Here, you'll find all the essential information about our project. This wiki is designed to be a helpful resource for both new and existing team members.</p>"},{"location":"#project-definition","title":"Project Definition","text":"<p>CivicTechJobs will be a site to find open volunteer positions for projects at Hack for LA.</p>"},{"location":"#introduction-to-the-project","title":"Introduction To The Project","text":""},{"location":"#what-is-civictechjobsorg","title":"What is Civictechjobs.org?","text":"<p>Civic Tech Jobs is a platform designed to connect prospective Hack for LA volunteers with interdisciplinary projects that align with their career goals while driving positive civic impact. The custom-built CMS enables this by allowing projects to list required skills and then matching volunteers based on their availability, skills, and program area.</p>"},{"location":"#why-do-it","title":"Why do it?","text":"<p>CTJ will tackle key challenges in project recruitment and organizational sustainability, with future development focused on connecting volunteers to opportunities that align with paid job postings.</p>"},{"location":"#hasnt-it-been-done-already","title":"Hasn't it been done already?","text":"<p>Yes, there are recruitment issues on project boards. However, the process is cumbersome and involves multiple steps to match candidates with the right roles.</p> <p>Read more about what lead up to us developing this project, at our History page.</p>"},{"location":"#so-how-is-this-different","title":"So how is this different?","text":"<p>We aim to streamline the process so that Product Managers can efficiently post open opportunities within their team. Most importantly, we want to ensure that volunteers can easily find the right match with a project based on their skills and aspirations.</p>"},{"location":"#guiding-objectives","title":"Guiding Objectives","text":""},{"location":"#what-are-our-guiding-objectives","title":"What are our guiding objectives?","text":"<ol> <li>Enable product managers ability to post, edit, or close open positions on an easy to use instinctive site (CMS).</li> <li>Assist potential volunteers to self-filter roles based on their availability.</li> <li>Provide potential volunteers list of open roles with different projects that matches their skills, and interest.</li> </ol>"},{"location":"#project-one-sheet","title":"Project One Sheet","text":"<p>Access our project one sheet CTJ_ Civic Tech Jobs One Sheet - 2025.pdf</p>"},{"location":"#key-resources","title":"Key Resources","text":"<p>To take a look at some of our key resources:</p> <ul> <li>Civictechjobs Google Drive</li> <li>Civictechjobs Figma File</li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>More resources to be added as project progresses:</p>"},{"location":"resources/#core-start-here","title":"Core - Start here","text":"<ol> <li>civictechjobs.org</li> <li>Github Repo</li> <li>Our Figma</li> <li>CivicTechJobs Docs</li> <li>CivicTechJobs Github Wiki</li> <li>CTJ Core Team</li> <li><code>#civictechjobs</code> slack channel (in the Hack For LA organization slack)</li> <li><code>#civictechjobs-dev</code> channel</li> </ol>"},{"location":"resources/#project-management","title":"Project Management","text":"<ol> <li>Project Board</li> <li>Project one sheet</li> <li>Our Shared Google Drive<ul> <li>CTJ: Google Drive folder navigation </li> </ul> </li> <li>GitHub Workflow</li> <li>Milestones</li> <li>Path to MVP</li> <li>CTJ : HfLA Skills and Experience Matrix - Google Sheets</li> </ol>"},{"location":"resources/#roadmaps","title":"Roadmaps","text":"<ol> <li>CTJ Requirements &amp; Roadmap (Feature Roadmap)</li> <li>Developer Roadmap \u00b7 Issue #381 \u00b7 hackforla/CivicTechJobs \u00b7 GitHub</li> </ol>"},{"location":"resources/#team-meeting-agendas","title":"Team Meeting Agendas","text":"<ol> <li>CTJ: Monthly All Hands Team Meeting Agenda</li> <li>CTJ: Leads Agenda</li> <li>CTJ: Development Meeting Agenda</li> <li>CTJ: UXR Meeting Agenda</li> <li>CTJ: PM/ORG Meeting Agenda and Notes</li> </ol>"},{"location":"resources/#design-resources","title":"Design Resources","text":"<ol> <li>Our Figma</li> <li>Userflow Diagram - OUTDATED</li> <li>Research Slide Deck</li> <li>Task and User Flow</li> <li>HfLA Website Figma - Section for Volunteer Opportunities</li> </ol>"},{"location":"resources/#diagrams","title":"Diagrams","text":"<ol> <li>Full Stack Architecture Diagram</li> <li>Frontend and Backend UML diagrams</li> <li>Data Model diagram</li> <li>E2E flow</li> </ol>"},{"location":"resources/#for-developers","title":"For Developers","text":"<ol> <li>Contributing.md</li> <li>Frontend Architecture</li> <li>Frontend Resources</li> <li>Backend Architecture</li> <li>Backend Resources</li> <li>DevOps Architecture</li> <li>DevOps Resources</li> <li>GitHub Architecture</li> <li>GitHub Resources</li> <li>Design System Helper</li> <li>Design System Resources</li> <li>Installation Instructions</li> <li>Installation Resources</li> <li>Development Culture</li> </ol>"},{"location":"resources/#tools","title":"Tools","text":"<ol> <li>GoFullPage Screenshot Chrome Extension'</li> </ol>"},{"location":"resources/#historical-docs","title":"Historical Docs","text":"<ol> <li>CTJ old docs website: CivicTechJobs Docs</li> <li>CTJ old docs Repo: hackforla/CivicTechJobs-documentation</li> </ol>"},{"location":"developer/backend/","title":"Backend Architecture","text":"<p>test</p> <p><p>Overall project structure</p></p> <pre><code>\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/\n\u251c\u2500\u2500 backend/ # Backend\n\u2502    \u251c\u2500\u2500 backend/  # Backend\n\u2502          \u2514\u2500\u2500 settings.py\n\u2502    \u251c\u2500\u2500 ctj_api/  # Backend\n\u2502    \u251c\u2500\u2500 manage.py\n\u2502    \u251c\u2500\u2500 poetry.lock\n\u2502    \u2514\u2500\u2500 pyproject.toml  # Backend\n\u251c\u2500\u2500 dev/\n\u2502    \u251c\u2500\u2500 django.dockerfile\n\u2502    \u251c\u2500\u2500 vite.Dockerfile\n\u2502    \u2514\u2500\u2500 dev.env\n\u251c\u2500\u2500 frontend/\n\u251c\u2500\u2500 mkdocs/\n\u251c\u2500\u2500 stage/\n\u2502    \u251c\u2500\u2500 Dockerfile\n\u2502    \u2514\u2500\u2500 stage.env\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre> <p><p>Backend folder structure</p></p> <pre><code>\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 &lt;Django Project Files&gt;\n\u251c\u2500\u2500 ctj_api/\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u251c\u2500\u2500 &lt;Django App Files&gt;\n\u2502   \u2514\u2500\u2500 &lt;RESTFramework Files&gt;\n\u251c\u2500\u2500 frontend_dist/\n\u2502   \u2514\u2500\u2500 &lt;Vite build Files&gt;\n\u251c\u2500\u2500 staticfiles/\n\u2502   \u2514\u2500\u2500 &lt;Django built Static Files&gt;\n\u251c\u2500\u2500 .flake8\n\u251c\u2500\u2500 entrypoint.sh\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 openapi-schema.yml\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 startServer.sh\n</code></pre> <p><p>Backend Architecture</p></p> <p>These diagrams show how data flows through the app: Frontend and Backend UML diagrams</p>"},{"location":"developer/backend/#summary","title":"Summary","text":"<p>Backend Tech Stack: Django, DjangoRESTFramework</p> <p>The backend architecture consists of the Django <code>backend/</code> project, and the <code>ctj_api/</code> Django apps. The <code>frontend_dist/</code> directory serves as our frontend build folder. More about the <code>frontend/</code> directory as it relates our frontend architecture can be found in our guide on Frontend Architecture.</p>"},{"location":"developer/backend/#overview-of-directories-and-files","title":"Overview of Directories and Files","text":"<ul> <li>backend/backend/: houses the core Django project files. </li> <li>&lt;Django Project Files&gt;: More on the files in this directory can be found in Django's documentation.</li> <li>&lt;Django App&gt;: currently we have two directories that are Django apps: <code>backend/</code> and <code>ctj_api/</code>. Within these directories are the default <code>&lt;Django App Files&gt;</code> that are created with every app as well as <code>&lt;RESTFramework Files&gt;</code>.</li> <li>&lt;Django App Files&gt;: These files make up a Django App. To know more about these apps, read the section about Django App Files.</li> <li>&lt;RESTFramework Files&gt;: Currently consists of <code>serializers.py</code> and <code>permissions.py</code>. These files are additional files that support Django via the DjangoRestFramework library.</li> <li>manage.py: Part of Django, this is the entry point file for starting the Django server. This file handles a lot of critical settings, so be sure to read up on it in Django's documentation.</li> </ul> <p> Django Build files</p> <ul> <li>frontend_dist/: The frontend React application's vite build files go in here. Django will use this to build the static frontend site to be served over whitenoise in stage/production.</li> <li>staticfiles/: The static files django will serve to the client in stage/production. This folder is built when we run <code>python manage.py collectstatic</code></li> <li>openapi-schema.yml: Django REST Framework automatically generates this OpenAPI specification using our API code.</li> </ul> <p> Dependency management</p> <ul> <li>pyproject.toml: A Python file that contains all dependencies for a project. It is the Python + Poetry equivalent to Javascript's <code>package.json</code>.</li> <li>poetry.lock: Poetry's dependency lock file. Equivalent to <code>package-lock.json</code> in JS.</li> </ul> <p> Other files</p> <ul> <li>.flake8: flake8 linter settings.</li> <li>entrypoint.sh: script that docker uses to build and start the stage and prod environments.</li> <li>startServer.sh: you can use this script to test and start the django server on your local machine without using docker.</li> </ul>"},{"location":"developer/backend/#django-app-files","title":"Django App Files","text":"<pre><code>\u251c\u2500\u2500 migrations/\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 admin.py\n\u251c\u2500\u2500 apps.py\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 tests.py\n\u251c\u2500\u2500 urls.py\n\u2514\u2500\u2500 views.py\n</code></pre> <p><p>Files generated by Django when creating a new Django app</p></p> <p>These files use DjangoRestFramework in order to quickly create an API. The most often edited files here are <code>models.py</code>, <code>urls.py</code>, and <code>views.py</code>. The models define the schema for our database tables. Once the models are made, they are routed to <code>views.py</code> where the data is transformed and exposed to our API. It is in views where we create handlers to manage REST operations.</p> <p>Please refer to Django's documentation for more information.</p>"},{"location":"developer/backend/#django-rest-framework-files","title":"Django REST Framework Files","text":"<p>The <code>backend/ctj_api/</code> folder houses the core CivicTechJobs API server files.</p> <pre><code>\u251c\u2500\u2500 permissions.py\n\u251c\u2500\u2500 serializers.py\n</code></pre> <p><p>RESTFramework files used to create a Django REST API</p></p> <p>Serializers turn the data from the database into a Python-readable form.</p> <p>Permissions allow you to create access permissions for specific API endpoints.</p> <p>Please refer to DjangoRESTFramework's documentation for more information.</p>"},{"location":"developer/backend/#linting-the-backend","title":"Linting the backend","text":"<p>Run before making a backend PR:</p> <pre><code>poetry run isort .\npoetry run black .\npoetry run flake8\n</code></pre> <ul> <li>Make sure you are in the <code>/backend</code> folder</li> <li>Make sure you run it in the above order (isort, then black, then flake8)</li> <li><code>isort</code>: sorts the import statements</li> <li><code>black</code>: automatically formats python code</li> <li><code>flake8</code>: lints python code</li> </ul>"},{"location":"developer/backend/#additional-resources","title":"Additional Resources","text":"<p>Django Documentation DjangoRestFramework Documentation OpenAPI Documentation Poetry Documentation Feature/lint python redo by LoTerence \u00b7 Pull Request #603 \u00b7 hackforla/CivicTechJobs \u00b7 GitHub</p>"},{"location":"developer/design-system/","title":"Design System Helper","text":"<p>This guide is the developer documentation for the CivicTechJobs Design System (CTJ-DS). Inside is not only an overview of our components, but also usage tips, and strategies to translate Figma designs into components for flexible, dynamic web pages.</p>"},{"location":"developer/design-system/#concepts","title":"Concepts","text":"<p>To understand our Design System, these are some overarching concepts to keep in mind when working with the DS.</p>"},{"location":"developer/design-system/#implementing-from-figma-to-frontend-development","title":"Implementing from Figma to Frontend Development","text":"<p>UI designers specialize in turning project requirements into graphical interfaces that fits project requirements. Designers, however, are not coders. As a result, here are some development-related aspects of componentization that designers do not consider:</p> <ul> <li>the way components change as screen size changes</li> <li>the ease of replicating components in code</li> <li>the proper way to configure svg assets for development</li> </ul> <p>Because of these factors, the way a prototype is built on Figma does not necessarily translate 1:1 to how the designs should be build as code. For example, Figma designs does not use SCSS mixins to simplify code or percentages as units of size.</p> <p>Likewise, we must contend with the fact that Figma designs are static screens tied to very specific viewport sizes. As developers we need to recreate the Figma designs while also considering the intent behind a design.</p> <p>As a developer, we need to effectively communicate with designers at multiple stage of the Figma design process. This means providing recommendations or alternatives that are simpler and easier for the developer to implement and maintain.</p> <p>At CivicTechJobs, designers use two standard viewport widths when creating our UIs: 1440px for desktop and 375px for mobile. The appearance of the UI beyond these two sizes are determined by us, as developers, as we componentize the Figma designs. Do note though that our screen size of interest changes depending on the stage of our project. Right now, our current size of interest is:</p> <pre><code>1025px and up (or, laptop and up)\n</code></pre>"},{"location":"developer/design-system/#scalable-and-responsive-components","title":"Scalable and Responsive Components","text":"<p>When creating or using components, it is good to keep in mind the differences between a scalable component and responsive component.</p> <p>A scalable component:</p> <ul> <li>takes up a certain fraction of the total screen size</li> <li>shrinks and grows along with screen size</li> <li>uses relative CSS sizing units, such as % or vm</li> </ul> <p></p> <p><p>These columns show scalable behavior. The columns smoothly shrink and grow with the screen size.</p></p> <p>A responsive component:</p> <ul> <li>takes up an absolute amount of the screen</li> <li>remains static until reaching a certain breakpoint</li> <li>uses static CSS sizing units, such as px</li> </ul> <p></p> <p><p>These buttons show responsive behavior. The buttons do not change until the screen reaches a certain breakpoint.</p></p> <p>Scalability and responsiveness are not mutually exclusive. A web page can contain both scalable and responsive components. As a matter of fact, a single component can be both responsive and scalable.</p> <p></p> <p><p>This card shows both scalable and responsive behavior. The width smoothly change with the screen size, but drastically changes at our max small tablet breakpoint.</p></p> <p>Only by combining both scalability and responsiveness in our design, can we create a high-quality site. When translating from Figma to code, most of the time, the work is in deciding what part of the Figma design should scale, and what part should be responsive. As a rule of thumb, when designing the transition from the desktop to mobile Figma, scale down empty space and margins, and responsively shrink buttons and text.</p>"},{"location":"developer/design-system/#proptype-as-documentation","title":"PropType as Documentation","text":"<p>As a small project, React recommends the use of PropTypes as our type checking library.</p> <p>By using PropTypes, we have an easy way to look up hints on how to use our components.</p> <pre><code>Button.propTypes = {\n  addClass: PropTypes.string,\n  color: PropTypes.oneOf([\"primary\", \"primary-dark\"]),\n  disabled: PropTypes.bool,\n  href: PropTypes.string,\n  length: PropTypes.oneOf([\"\", \"long\"]),\n  onClick: PropTypes.func,\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\", \"icon\"]),\n  target: PropTypes.oneOf([\n    \"_blank\",\n    \"_self\",\n    \"_parent\",\n    \"_top\",\n    PropTypes.string,\n  ]),\n};\n</code></pre> <p><p>For this &lt;Button&gt; component, PropTypes provide clues on the component's props. From these hints, a developer can guess that a small, long button would be declared as &lt;Button size=\"sm\" length=\"long\"&gt; </p></p> <p>Because comprehensive documentation is difficult for a small team to maintain, we rely on PropTypes and cleanly written code to provide clues on how to use each component. We recommend new developers take time to play with the components in <code>components/</code> to fully understand how to utilize them. You can use the /demo web endpoint and Demo.js when developing to play around with our components.</p>"},{"location":"developer/design-system/#components","title":"Components","text":"<p>While we can use pure CSS as our styling sheet, using SCSS with React components allows us to standardize our components in a powerful way. Componentization allows:</p> <ul> <li>quick customizations through React props</li> <li>standardizations to our components for accessibility</li> <li>reuse of the same component across multiple pages</li> <li>updating designs by simply editing the base component</li> </ul> <p>Because of these benefits, we use a component-first approach to developing web pages. Please componentize as much as possible and use them to build high-quality web pages!</p> <p>As a note, the DS is put together based on industry trends and practices. If you have ever explored Bootstrap, MUI, or Atlassian Design System, you will see many similarities between their components and ours.</p>"},{"location":"developer/design-system/#mixins-and-classes","title":"Mixins and Classes","text":"<p>Most of our styles have a class and mixin equivalent. The class, for the most part, is created from just declaring the mixin inside the class.</p> <pre><code>@mixin hidden {\n  display: none;\n}\n\n.hidden {\n  @include hidden;\n}\n</code></pre> <p><p>Above is the hidden mixin definition. Below is the hidden mixin declaration as part of the .hidden class.</p></p> <p>These are both provided to suit different use cases. For example, the class version is best suited for declaring inside of React components or HTML elements as part of the <code>addClass</code> prop or <code>className</code> attribute. On the other hand, the mixin version is best used when adding it to your own custom style, such as with media queries.</p> <pre><code>.my-own-custom-class {\n  @include breakpoint-media-max(\"smtablet\") {\n    @include hidden; // Do this\n    @extend .hidden; // Do not do this, will break\n\n    @include col-size(6); // Do this\n    @extend .col-6; // Do not do this, will break\n  }\n}\n</code></pre> <p><p>Please use the mixin version when you want your own custom style to inherit from an existing style!</p></p>"},{"location":"developer/design-system/#layout-and-columns","title":"Layout and Columns","text":"<p>As with most design systems, we use a standard 12-column system to subdivide our layouts. Each column, without spacing, is worth *8.33% of its container's width**. This means that columns are, by default, scalable.</p> <p>To use of our column classes, first declare a parent container with the <code>.flex-container</code> class. Then use <code>col-*</code> classes in each children, replacing the <code>*</code> with the number for the column size.</p> <p><p>We need to use a parent <code>.flex-container</code> with <code>col-*</code> classes to subdivide the UI.</p></p> <p>Our 12-column system can be used in conjunction with <code>.row</code> and nested <code>.col-*</code> to further subdivide the UI, and create more complex layouts.</p> <p><p>With <code>.flex-container</code>, <code>.row</code>, and <code>.col-*</code>, we can create complex layouts that fit our purposes.</p></p>"},{"location":"developer/design-system/#note-although-figma-uses-12-columns-to-subdivide-the-entire-screen-our-column-classes-subdivides-the-container-this-means-that-we-can-divide-the-whole-screen-into-columns-and-then-divide-each-column-even-further-to-achieve-our-desired-ratios","title":"*Note: Although Figma uses 12 columns to subdivide the entire screen, our column classes subdivides the container. This means that we can divide the whole screen into columns, and then divide each column even further to achieve our desired ratios.","text":""},{"location":"developer/design-system/#smart-spacing","title":"Smart Spacing","text":"<p>\"99% of the time, you'll want to reclaim space from padding, margins, or empty space as screen size shrinks.\"</p> <p>The spacing utilities are classified by attributes and size.</p> <p>Table of Spacing Attributes</p> Spacing attribute (margins) Meaning | Spacing attribute (padding) Meaning m all margins | p all paddings mt margin-top | pt padding-top mr margin-right | pr padding-right mb margin-bottom | pb padding-bottom ml margin-left | pl padding-left mx margin-left and -right | px padding-left and -right my margin-top and -bottom | py padding-top and -bottom <p>Table of Spacing Sizes</p> Spacing size Actual size (px) 0 0px 1 8px 2 16px 3 24px 4 32px 5 40px <p><p>Tables showing the different way we classifies our spacing utilities. As an example, <code>.px-4</code> sets the left and right padding as 32px.</p></p> <p>Because our DS is based on a 12-column system, spacing utilities are made such that adding them on would not alter the 12-column system. For that reason, it is optimal to use the spacing utilities whenever possible over setting custom margins or padding.</p> <p><p>Add margins responsibly. Try to use the spacing utilities over creating custom margin classes.</p></p> <p>As an example, if Figma indicates a 10px left margin, use either <code>.ml-1</code> or <code>.ml-2</code>. Other times, however, Figma designs show spacing that falls outside of our size range. In this scenario, rather than set a specific margin, try to use centering instead, as large spaces are usually not a result of spacing, but of centering.</p> <p>By being smart about the way we include spacing, we ensure scalability and reduce the maintenance cost of our code.</p>"},{"location":"developer/design-system/#responsive-mixins","title":"Responsive Mixins","text":"<p>\"When using responsive mixins, order matters! Always declare them from big to small.\"</p> <p>Several of our components have <code>*-responsive</code> mixins at the end of the <code>.scss</code> file. These act as helpers to quickly create responsiveness into our components, keeping our code simple to understand.</p> <p>These mixins always use max-width in its media query (as we use a desktop-first approach), so order matters! To use them properly, specify a default* and declare screen size from largest to smallest:</p> <p><p>DO: specify a default on top and declare <code>*-responsive</code> mixins from large to small screen sizes.</p></p> <p><p>DON'T: declare <code>*-responsive</code> mixins without a default on top or from a smaller to larger screen size.</p></p>"},{"location":"developer/design-system/#note-there-is-one-caveat-to-that-as-some-components-come-with-their-own-default-for-example-buttons-take-a-size-prop-in-which-you-declare-a-default-already-therefore-when-using-the-responsive-mixin-for-button-size-there-is-no-need-to-declare-a-top-level-default-in-the-scss-code","title":"*Note: There is one caveat to that as some components come with their own default. For example, buttons take a size prop, in which you declare a default already. Therefore when using the responsive mixin for button size, there is no need to declare a top level default in the scss code.","text":""},{"location":"developer/design-system/#svgs-as-components-and-as-data-urls","title":"SVGs as Components and as Data-URLs","text":"<p>SVG assets are read into our codebase as React components (or inline SVG) or data-urls.</p> <p>As React components:</p> <ul> <li>specified with a starting uppercase</li> <li>allows the use of React props to dynamically alter the component</li> <li>requires editing stroke and fill values to inherit to allow passing in props</li> <li>requires a wrapper element to add additional styling</li> <li>are imported directly from the image file</li> <li>difficult to work with by provide lots of customization</li> </ul> <p>As Data-urls:</p> <ul> <li>specified with a starting lowercase</li> <li>are used as the src in <code>img</code> tags, to allow quick width/length adjustments</li> <li>difficult to dynamically change</li> <li>simple to declare and use</li> <li>are imported with <code>?url</code> qualifiers</li> <li>not customizable beyond width and height</li> </ul> <pre><code>// COP Icons\nimport CopIconData from \"./svgs/cop-icon-datascience.svg\";\nimport CopIconEngineering from \"./svgs/cop-icon-engineering.svg\";\nimport CopIconOps from \"./svgs/cop-icon-ops.svg\";\nimport CopIconProduct from \"./svgs/cop-icon-product.svg\";\nimport CopIconUiux from \"./svgs/cop-icon-uiux.svg\";\n\nimport copIconData from \"./svgs/cop-icon-datascience.svg?url\";\nimport copIconEngineering from \"./svgs/cop-icon-engineering.svg?url\";\nimport copIconOps from \"./svgs/cop-icon-ops.svg?url\";\nimport copIconProduct from \"./svgs/cop-icon-product.svg?url\";\nimport copIconUiux from \"./svgs/cop-icon-uiux.svg?url\";\n</code></pre> <p><p>The top icons are imported from the image file as SVG components (or inline SVG). The bottom icons are the same file imported as data-urls. Notice how the latter import file adds \"?url\".</p></p> <p>When using our SVG assets make sure to use the best import for the job. In some cases, however, neither of these imports are optimal to use. For example the SVG itself might be incorrectly formatted.</p> <p></p> <p><p>This SVG contains extra spaces, especially on the bottom. This image is impossible to center correctly without adding unnecessary margins.</p></p> <p>In this case, rather than calculating some difficult to maintain, complex spacing, simply request the design team to provide a better SVG or edit the SVG yourself and send a copy to the design team.</p>"},{"location":"developer/design-system/#troubleshooting-errors","title":"Troubleshooting Errors","text":""},{"location":"developer/design-system/#you-may-not-extend-selectors-across-media-queries","title":"You may not @extend selectors across media queries.","text":"<p>This happens when @extend is used inside of media queries. An example using our DS,</p> <pre><code>.header-logo-desktop {\n  @include breakpoint-media-max(\"smtablet\") {\n    @extend .hidden;\n  }\n}\n</code></pre> <p><p>Using @extend inside of a media query will result in an error. Instead, use a mixin declaration with @include instead. Most classes in the DS include an equivalent mixin for this specific purpose.</p></p> <pre><code>.header-logo-desktop {\n  @include breakpoint-media-max(\"smtablet\") {\n    @include hidden;\n  }\n}\n</code></pre> <p><p>This works because it declares a mixin rather than extend the class!</p></p> <p>To avoid these errors, it is encouraged to use the mixin rather than the class version of a specific style for inheritance whenever possible!</p> <p>For more information visit this documentation and this Stack Overflow question.</p>"},{"location":"developer/design-system/#resources","title":"Resources","text":"<p>Atomic Design Atlassian Design System Bootstrap Material-UI</p> <p>Note: If embeds are out-of-date, and you have no access to the originals, please fork and replace them through CodeSandbox!</p> <p>CodeSandbox</p>"},{"location":"developer/development-culture/","title":"Development Culture","text":"<p>At CivicTechJobs, the developers of our team have 3 key tasks:</p> <ul> <li>Make issues</li> <li>Resolve issues</li> <li>Review code</li> </ul> <p>This guide will discuss how each of these work at CivicTechJobs. If you have any questions be sure to let us know! We strive to create an inclusive space for developers to learn and achieve their goals.</p>"},{"location":"developer/development-culture/#make-issues","title":"Make Issues","text":"<p>To make an issue, follow this guide from GitHub, or take a look at this section of the CONTRIBUTING.md.</p> <p>At CivicTechJobs, updating the project starts with creating an issue outlining the situation and changes needed to resolve the situation. When writing an issue, a good rule of thumb is to write as if another developer would be the one to work on the issue. Therefore, being thorough is better than brief. Some good guidelines to follow:</p> <ul> <li>Write a brief, two sentence summary for the overview. Be sure to note why these changes is needed.</li> <li>In the overview, use language with little jargon.</li> <li>Action items are usually step by step instructions or a list of requirements.</li> <li>Longer explanations or useful documentation, if needed, are placed in the Instruction/Resources section.</li> <li>Dependencies should 90% of the time be another issue. If this issue does not exist, it should probably be made and referenced as a dependency.</li> <li>Likewise, the dependency should reference the issue it is a dependency for so that there is a trail to release issues with dependencies.</li> <li>Check out examples of developer issues, such as this, for how to structure and word issues.</li> </ul> <p>After writing out the issue, be sure to add labels. At minimum, we need three labels, one each from the \"size\", \"role\" and \"feature/p-feature\" series. In most cases, you should not create your own label. If you are unsure what labels to place, it is okay to leave it be, as another team member will help you when they notice the issue lacks certain labels.</p> <p>Once an issue is created, and placed in the Project Management project board, the developer is mostly done with the issue. If the issue contains a dependency, it will move into the \"Ice Box\" column via GitHub automation, or \"New Issue Approval\", otherwise.</p> <p>On rare occasions, a project manager, or other team members, might ping you with questions on the issue. Perhaps the team member did not understand the jargon, or the instructions were unclear. In that case, read their concerns carefully and either answer with a comment, or edit the original issue. Eventually, the issue will be approved, prioritized, and released into the \"Prioritized Backlog\" column, where developers can work on it.</p>"},{"location":"developer/development-culture/#resolve-issues","title":"Resolve Issues","text":"<p>To resolve an issue, take a look at this section of the CONTRIBUTING.md.</p> <p>When choosing an issue to work on from the \"Prioritized Backlog\" column, it is good to note the \"role\" and \"size\" label. This signals the expertise required and time commitment needed to resolve the issue. As a rule of thumb, a smaller issue should take a week, and a larger issue, two or three weeks. This should give you a good idea on what issues is best for you to take at the moment. If you are completely new, we recommend taking smaller issues to understand your limits before pushing them further. That said, you are free to work on whatever you want.</p> <p>On occasion, when an issue is being worked on for an inordinate amount of time, the team might request an update on your progress. When giving your progress, it is courteous to give an ETA on the issue, and evaluate on your ability to resolve the issue in a reasonable timeframe. If an issue is taking far too long, it might be wise to abandon the issue and work on something that might bring more value to you and the team.</p> <p>Also, one final note: Do not contact the team via email or Slack to review your pull request unless it as been 72 hours since it was opened! The team will occasionally comb for pull requests and review them. If you want to move on to another issue, consider reviewing another developer's pull request (if you are part of the team), contribute to other open source projects, or ask the team for additional tasks.</p> <p>Most issues can be divided into two broad types: frontend issues, and backend issues.</p>"},{"location":"developer/development-culture/#frontend-issues","title":"Frontend issues","text":"<ul> <li>Usually involves the appearance of the site</li> <li>Usually easier than backend issues</li> <li>Requires little research</li> <li>Is occasionally an audit</li> <li>May involve documentation</li> </ul> <p>When working on frontend issues, there will usually be a link to the Figma design. Figma often contains multiple prototypes and future prototypes. When looking for our current design, go to the bottom right corner and look for a pink rectangle. Anything within that represents our most up-to-date design. Use that as a reference for your frontend issues. If the pink rectangle is not there, please request the UI design team to put a pink rectangle on the latest approved design.</p> <p>On rare circumstances, designs can change in the middle of work. This is something that happens as part of development, but will often be telegraphed during meetings. If a design change, you are free to reassess and abandon your current issue, or code pragmatically to ensure your work would not need a massive overhaul.</p>"},{"location":"developer/development-culture/#backend-issues","title":"Backend issues","text":"<ul> <li>Usually involves research and discussion</li> <li>Can also pertain to GitHub Actions</li> <li>Usually takes some time</li> <li>May involve documentation</li> </ul>"},{"location":"developer/development-culture/#review-code","title":"Review Code","text":"<p>To review code, please take a look at this GitHub documentation, and this portion of our CONTRIBUTING.md.</p> <p>Code that should be reviewed is found in the pull request tab. These are issues that require someone to look over for several criteria:</p> <ul> <li>Applicability: Were the correct changes made? Where new lines added or removed that are extraneous to the issue?</li> <li>Brokenness: Did the changes break the site? Is the changes responsive to view-port changes?</li> <li>Cleanliness: Is the new code programmatic or messy? Would the code be hard to maintain in the long run?</li> </ul> <p>When code meets all three criteria, it can then be merged and made a part of the site. Otherwise, the review should indicate changes that needs to be made.</p> <p>As an advanced project, CivicTechJobs have certain expectations for our developers. One of these is that issues of size 1 or 2 is small enough that we \"pre-review\" them. This means that we are confident that the developer can resolve these issues without review. Therefore, these issues can be merged directly into our codebase upon resolution. That said, it is still fine to request the team to review your code if feedback is desired.</p> <p>Important: Although issues can be pre-reviewed, do not make a habit of merging without making a pull request. There will be times when you performed an accidental merge, which could be a pain to fix on the command-line.</p> <p>As one final note, code can be merged solely on one approved review but it is fine to request more reviewers or ask for the team to review it during a developer meeting.</p>"},{"location":"developer/devops/","title":"DevOps Architecture","text":"<pre><code>\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/\n\u251c\u2500\u2500 aws/ # DevOps\n\u251c\u2500\u2500 backend/\n\u2502    \u251c\u2500\u2500 backend/\n\u2502          \u2514\u2500\u2500 settings.py\n\u2502    \u251c\u2500\u2500 ctj_api/\n\u2502    \u251c\u2500\u2500 frontend_dist/\n\u2502    \u251c\u2500\u2500 staticfiles/\n\u2502    \u251c\u2500\u2500 entrypoint.sh # DevOps\n\u2502    \u251c\u2500\u2500 manage.py\n\u2502    \u251c\u2500\u2500 pyproject.toml\n\u2502    \u2514\u2500\u2500 startServer.sh\n\u251c\u2500\u2500 dev/ # DevOps\n\u2502    \u251c\u2500\u2500 django.dockerfile\n\u2502    \u251c\u2500\u2500 vite.Dockerfile\n\u2502    \u2514\u2500\u2500 dev.env\n\u251c\u2500\u2500 frontend/\n\u251c\u2500\u2500 mkdocs/\n\u251c\u2500\u2500 stage/  # DevOps\n\u2502    \u251c\u2500\u2500 Dockerfile\n\u2502    \u2514\u2500\u2500 stage.env\n\u251c\u2500\u2500 .dockerignore # DevOps\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docker-compose.docs.yml # DevOps\n\u251c\u2500\u2500 docker-compose.stage.yml # DevOps\n\u251c\u2500\u2500 docker-compose.yml # DevOps\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre> <p><p>Overall project structure</p></p> <pre><code>\u251c\u2500\u2500 dev/\n\u2502    \u251c\u2500\u2500 dev.env.example\n\u2502    \u251c\u2500\u2500 django.dockerfile\n\u2502    \u2514\u2500\u2500 vite.Dockerfile\n\u251c\u2500\u2500 stage/\n\u2502    \u251c\u2500\u2500 Dockerfile\n\u2502    \u2514\u2500\u2500 stage.env.example\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 docker-compose.docs.yml\n\u251c\u2500\u2500 docker-compose.stage.yml\n\u2514\u2500\u2500 docker-compose.yml\n</code></pre> <p><p>DevOps Architecture</p></p>"},{"location":"developer/devops/#summary","title":"Summary","text":"<p>DevOps Tech Stack: Docker, Daphne, Whitenoise, PostgreSQL</p> <p>Our devops files can be thought of as a set of files needed to create an exact replica of our environments for our developers. Although the overall structure appears deceptively basic, it only represents a fraction of our devops files. Several of our files, such as the ones that construct our staging environment, contains sensitive information, and as such are not placed in our public repository. For most frontend and backend work, there is never a need to access these files.</p> <p>*Note: On the rare occasions that there is a need to access the sensitive files for environments other than development, please consult the development lead of the project. They will know exactly what files you need, and what permissions you need to access them.</p>"},{"location":"developer/devops/#overview-of-directories-and-files","title":"Overview of Directories and Files","text":"<ul> <li>dev/: contains two dockerfiles and an env file. <code>django.dockerfile</code> contains information for our Django server setup. <code>vite.Dockerfile</code> contains information to start our vite dev server. <code>dev.env.example</code> is an example of the env file needed to configure our dev environment.</li> <li>.dockerignore: This file tells Docker to ignore certain files when building the container. These are usually files that pertain to docker or git, which are not important when building the webserver.</li> <li>docker-compose.yml: Contains instructions for docker when we run \"docker compose\". To know more about what each line does, please consult Docker's documentation. This compose file starts the development environment.</li> <li>docker-compose.stage.yml: Docker compose file for starting the stage environment.</li> <li>docker-compose.docs.yml: Docker compose file for starting the mkdocs development server.</li> </ul>"},{"location":"developer/devops/#docker","title":"Docker","text":"<p>Docker is a platform that allows packaging and virtualizing applications within a container. This gives developers the powerful ability to collaborate in a stable, synchronized environment, and deploying web applications with the greatest of ease. We will not be going too much into Docker here, but we will explain in greater depth some of the Docker configurations we have made.</p>"},{"location":"developer/devops/#docker-composeyml","title":"<code>docker-compose.yml</code>","text":"<p>This file contains configuration directions for docker compose. It consists of three services: <code>pgdb</code> (our database), <code>vite</code> (our vite bundler), and <code>django</code> (our django server). The vite and django service relies on separate dockerfiles, located in the <code>dev</code> directory to build the container. This separation of dockerfiles enable each container to be build with its own set of dependencies. It also makes rebuilding the container simple when dependencies are migrated to a newer version.</p> <p>For those of you used to creating applications without Docker, most would run vite and django in separate terminals, so that they can both run at the same time. For the purposes of brevity, the different services can be considered to be Docker's way of running separate terminals.</p> <p>One will also notice that the Django command uses a placeholder server name, <code>0.0.0.0:8000</code>. This placeholder is important, since Docker creates an isolated environment. As a result, servers that are run in Docker does not recognize a browser from outside of that environment. Without this server name, localhost:8000 will not reach the server, as the server would recognize your browser as coming from a foreign machine. Therefore, all warnings related to 0.0.0.0, should they pop-up, should be ignored.</p> <p>The vite frontend and django backend dev servers are split into <code>localhost:5175</code> and <code>localhost:8000</code>, respectively. </p>"},{"location":"developer/devops/#dockerfile","title":"<code>*.dockerfile</code>","text":"<p>Dockerfiles are files that define how a container is built. Although containerization is a deep concept, to put it briefly, you can think of containers as separate \"mini-computers\", each programmed to do one thing. Some containers, such as our <code>pgdb</code> container does not require a dockerfile to configure it, as it works out of the box. On the otherhand, our <code>vite</code> and <code>django</code> containers need dockerfile to built out the files we need to run it effectively.</p> <pre><code>FROM node:latest\n\nWORKDIR /code\n\n\n# install app dependencies\nCOPY ./package.json ./\nCOPY ./package-lock.json ./\nRUN npm install\n\n\n# add app\nCOPY . .\n</code></pre> <p><p>Sample dockerfile that copies the package.json from a project and installs all dependencies.</p></p> <p>Dockerfiles are usually named as just <code>dockerfile</code>, as that is the default name that docker looks for when constructing our builds. Since our project requires multiple dockerfiles, we name them with <code>.dockerfile</code> extensions, a convention that allows VSCode to detect dockerfiles and use appropriate syntax highlighting.</p> <p>Do note that docker and dockerfiles can be fickle to work with, especially on old devices. Further down this documentation are various tips and commands that can be used with docker to help debug your code. But as always, consulting official documentation is the best way to get accurate, up-to-date information.</p>"},{"location":"developer/devops/#environments","title":"Environments","text":""},{"location":"developer/devops/#development","title":"Development","text":"<p>Our development environment is entirely defined by our <code>docker-compose.yml</code>, and the files inside of <code>dev/</code>. More information about those files can be found above.</p> <p>Of note, however, is the <code>dev.env.example</code> file. This file is only a sample, but lists out all the environmental variables needed to run our site. While most of them are prefilled, some uses <code>&lt;&gt;</code> to indicate placeholders, which must be filled in by the developer.</p>"},{"location":"developer/devops/#staging","title":"Staging","text":"<p>You can view the staging environment with the following URL: https://stage.civictechjobs.org/</p> <p>The main stage file is <code>docker-compose.stage.yml</code>. This docker compose file sets up a staging environment in our local machine.</p> <p>The following is a brief overview of how the stage environment is set up: 1. First build the React frontend with <code>vite build</code>. 2. Copy the <code>/frontend/dist</code> folder contents into <code>/backend/frontend_dist</code> 3. In the backend, build the django staticfiles with the command <code>python manage.py collecstatic</code> 4. Run the django migration commands to set up the postgres database. 5. Use daphne to start the python web server: <code>daphne -b 0.0.0.0 -p 8000 backend.asgi:application</code></p> <p>The <code>stage.env.example</code> contains environment variables used to configure the staging environment.</p> <p>The <code>/stage/Dockerfile</code> sets up the Django server. It first uses a JavaScript container to build the React frontend, then copies the files into a django container. Finally, it  uses the <code>/backend/entrypoint.sh</code> script to build and start the server.</p> <p>Our Django web server uses Whitenoise to serve the static html, css and js files. In other words, whitenoise serves the static frontend files.</p>"},{"location":"developer/devops/#aws-staging","title":"AWS staging","text":"<p>More information on our AWS staging files can be found in the <code>/aws</code> directory, and github action files. To access this information, please ask for the required permissions from the development lead.</p> <p>We plan to replace some of these files with Terraform scripts.</p>"},{"location":"developer/devops/#useful-commands","title":"Useful Commands","text":"<pre><code>docker compose down -v\n</code></pre> <p>Useful to completely remove a container and related volumes. This is helpful when fiddling with database settings, which often breaks the database. This command allows the container to be restarted fresh.</p> <pre><code>docker compose -f &lt;filename&gt; &lt;docker command&gt;\n</code></pre> <p>Use this to specify an alternate docker-compose file to run your commands, such as docker-compose-other.yml. This is useful if you want to test out docker for yourself.</p> <pre><code>docker compose run &lt;container&gt; &lt;command&gt;\n</code></pre> <p>This is useful to run one time commands inside your container. Some good commands to run are:</p> <ul> <li>python manage.py makemigrations</li> <li>python manage.py migrate</li> <li>python manage.py createsuperruser</li> <li>pip install -r requirements.txt</li> <li>npm install  <pre><code>docker exec -it &lt;container&gt; sh\n</code></pre> <p>Use this to do heavier debugging inside of your container. What this does is open the shell inside of the container's \"mini-computer\". This allows you to explore the files inside the container to see if it matches what you would expect after building is finished. This command only works when a container is running, so use <code>docker compose run -d</code> to run your container in the background beforehand.</p> <pre><code>docker compose build --progress=plain\n</code></pre> <p>Sometimes when a build is happening, the logs are too opaque to debug if a step goes wrong. This commands makes the logs a bit more verbose so that you might have an easier time debugging.</p>"},{"location":"developer/devops/#additional-resources","title":"Additional Resources","text":"<p>Docker Documentation How to use Django with Daphne Making React and Django play well together - the \"hybrid app\" model - Fractal Ideas Feature: Set up stage environment in docker by LoTerence \u00b7 Pull Request #613 \u00b7 hackforla/CivicTechJobs \u00b7 GitHub</p>"},{"location":"developer/eslint-guide/","title":"ESLint Guide - CTJ","text":"<p>The purpose of this page is to document how our ESLint setup is configured. ESLint is responsible for linting the frontend portion of our application.</p>"},{"location":"developer/eslint-guide/#eslint-configuration-documentation-for-frontend-developers","title":"ESLint Configuration Documentation for Frontend Developers","text":"<p>Our ESLint configuration is tailored to help us maintain a clean, consistent codebase with special attention to React, TypeScript, Tailwind CSS, and accessibility standards. Below is an overview of the main components and rules in the configuration and how they function.</p>"},{"location":"developer/eslint-guide/#plugins-and-extensions","title":"Plugins and Extensions","text":"<p>This configuration uses several plugins to enhance linting capabilities:</p> <ol> <li>@eslint/js - Provides basic JavaScript linting rules.</li> <li>typescript-eslint - Adds TypeScript support, integrating rules to enforce TypeScript-specific syntax and best practices.</li> <li>eslint-plugin-react - Adds React-specific linting rules to ensure best practices with JSX.</li> <li>eslint-plugin-prettier - Enforces code formatting consistency, using Prettier's rules.</li> <li>eslint-plugin-tailwindcss - Adds rules specific to Tailwind CSS, helping with class management and preventing misconfigured or conflicting classes.</li> <li>eslint-plugin-react-hooks - Enforces React Hooks rules, including hook dependency checking.</li> <li>eslint-plugin-jsx-a11y - Adds accessibility rules for JSX, ensuring the markup adheres to accessibility standards.</li> </ol>"},{"location":"developer/eslint-guide/#key-configuration-options","title":"Key Configuration Options","text":"<ol> <li>File Matching    The configuration applies to all JavaScript, JSX, TypeScript, and TSX files in the project, matching the following patterns:</li> <li><code>**/*.js</code></li> <li><code>**/*.jsx</code></li> <li><code>**/*.ts</code></li> <li> <p><code>**/*.tsx</code></p> </li> <li> <p>Global Environment    Sets up global variables specific to browser environments to avoid undefined variable errors.</p> </li> <li> <p>React Settings    Automatically detects the version of React being used, which optimizes the linting experience.</p> </li> <li> <p>Rules</p> </li> <li> <p>General Rules:</p> <ul> <li><code>no-unused-vars</code>: Warns about variables defined but not used.</li> <li><code>no-console</code>: Warns when <code>console</code> statements are used in production code.</li> <li><code>indent</code>: Enforces a 2-space indentation style for code consistency.</li> <li><code>no-irregular-whitespace</code>: Prevents errors caused by unexpected whitespace.</li> </ul> </li> <li> <p>Prettier Integration:  </p> <ul> <li><code>prettier/prettier</code>: Enforces Prettier's formatting rules for a consistent code style.</li> </ul> </li> <li> <p>React-Specific Rules:</p> <ul> <li><code>react/no-unescaped-entities</code>: Disabled globally. To bypass, use <code>/* eslint-disable react/no-unescaped-entities */</code> at the top of a file when necessary.</li> <li><code>react-hooks/rules-of-hooks</code>: Ensures hooks are only used within functional components and custom hooks.</li> <li><code>react-hooks/exhaustive-deps</code>: Warns about missing dependencies in effect hooks.</li> </ul> </li> <li> <p>TypeScript Rules:</p> <ul> <li><code>@typescript-eslint/no-unused-vars</code>: Flags unused variables in TypeScript code as errors.</li> </ul> </li> <li> <p>Tailwind CSS Rules:</p> <ul> <li><code>tailwindcss/no-contradicting-classname</code>: Prevents usage of conflicting Tailwind CSS classes.</li> <li><code>tailwindcss/no-unnecessary-arbitrary-value</code>: Warns about arbitrary values in Tailwind that could be simplified.</li> <li><code>tailwindcss/classnames-order</code>: Enforces consistent order of Tailwind CSS classes.</li> </ul> </li> <li> <p>Accessibility Rules (JSX A11y):</p> <ul> <li><code>jsx-a11y/alt-text</code>: Ensures all <code>img</code> elements have an <code>alt</code> attribute for accessibility.</li> </ul> </li> <li> <p>Ignored Files and Folders</p> </li> <li>Certain files and folders are ignored to avoid unnecessary linting errors, such as <code>node_modules/</code>, config files (<code>*.config.js</code>), and mock data in <code>tests/__mocks__</code>.</li> </ol>"},{"location":"developer/eslint-guide/#notes-on-using-eslint-in-development","title":"Notes on Using ESLint in Development","text":"<ul> <li>Disabling Rules Temporarily: If you encounter specific rule warnings or errors that are intentional or irrelevant to your case, you can disable rules at the file or line level using <code>// eslint-disable</code> comments.</li> <li>Testing New Plugins or Rules: When new plugins or rules are added, test them in a few sample files to ensure compatibility and expected behavior.</li> </ul>"},{"location":"developer/eslint-guide/#running-linter-and-formatter","title":"Running Linter and Formatter","text":"<p>To help maintain consistent code quality and style across the project, we\u2019ve set up commands for both linting and formatting. Here\u2019s how to use them:</p>"},{"location":"developer/eslint-guide/#linting","title":"Linting:","text":"<p>Run the linter using <code>npm run lint</code>. This command will analyze all files in the project for potential linting issues. It will attempt to auto-fix any issues it can and will display whether the code passed or failed the check. If there are any issues that cannot be auto-fixed, the output will provide details so they can be manually reviewed and addressed.</p>"},{"location":"developer/eslint-guide/#formatting","title":"Formatting:","text":"<p>Run the formatter using <code>npm run format</code>. This command will format all JavaScript, TypeScript, and JSON files in the project, skipping any files specified in .gitignore. These steps help ensure a consistent coding style across the project, minimizing style-related issues and making code easier to read and maintain.</p> <p>This ESLint setup ensures our codebase is both clean and accessible, while supporting best practices in React, TypeScript, and Tailwind CSS usage. For any adjustments to the rules or extensions, reach out to the team for further guidance.</p>"},{"location":"developer/eslint-guide/#recommended-extensions-for-vs-code","title":"Recommended Extensions for VS Code","text":"<p>To ensure consistent code quality and style across the team, please install the following extensions in Visual Studio Code:</p> <ul> <li>Prettier</li> <li>ESLint</li> </ul>"},{"location":"developer/eslint-guide/#additional-resources","title":"Additional Resources","text":"<p>Documentation - ESLint - Pluggable JavaScript Linter What is Prettier? \u00b7 Prettier</p>"},{"location":"developer/frontend/","title":"OUTDATED","text":""},{"location":"developer/frontend/#frontend-architecture","title":"Frontend Architecture","text":"<pre><code>\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/\n\u251c\u2500\u2500 app/\n\u2502    \u251c\u2500\u2500 config/\n\u2502          \u2514\u2500\u2500 settings.py\n\u2502    \u251c\u2500\u2500 frontend/ # Frontend\n\u2502    \u251c\u2500\u2500 server/\n|    \u251c\u2500\u2500 tests/  # Frontend\n|    \u251c\u2500\u2500 .babelrc  # Frontend\n|    \u251c\u2500\u2500 .jest.config.js  # Frontend\n\u2502    \u251c\u2500\u2500 manage.py\n\u2502    \u251c\u2500\u2500 requirements.txt\n\u2502    \u251c\u2500\u2500 package.json # Frontend\n\u2502    \u251c\u2500\u2500 package-lock.json # Frontend\n\u2502    \u2514\u2500\u2500 vite.config.mts # Frontend\n\u251c\u2500\u2500 dev/\n\u2502    \u251c\u2500\u2500 django.dockerfile\n\u2502    \u251c\u2500\u2500 vite.Dockerfile\n\u2502    \u2514\u2500\u2500 dev.env\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 jsconfig.json\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre> <p><p>Overall project structure</p></p> <pre><code>\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 src/\n\u2502       \u251c\u2500\u2500 assets/\n\u2502       \u251c\u2500\u2500 components/\n\u2502           \u251c\u2500\u2500 Apps.js\n\u2502           \u2514\u2500\u2500 &lt;Components&gt;/\n\u2502       \u251c\u2500\u2500 context/\n\u2502           \u251c\u2500\u2500 QualifiersContext.tsx\n\u2502       \u251c\u2500\u2500 pages/\n\u2502       \u251c\u2500\u2500 templates/\n\u2502           \u2514\u2500\u2500 index.html\n\u2502       \u251c\u2500\u2500 index.js\n\u2502       \u2514\u2500\u2500 index.scss\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 .babelrc\n\u251c\u2500\u2500 .jest.config.js\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 vite.config.mts\n</code></pre> <p><p>Frontend Architecture</p></p> <p>These diagrams show how data flows through the app: Frontend and Backend UML diagrams</p>"},{"location":"developer/frontend/#summary","title":"Summary","text":"<p>Frontend Tech Stack: React, Babel, webpack, Jest, React Testing Library, HTML, SCSS, JS, TailwindCSS</p> <p>The over ninety percent of our frontend architecture is housed in our <code>frontend/</code> directory. This directory is a Django app, which is a set of files that can be ported to any Django-based application.</p> <p>Since our frontend is a Django app, it takes advantage of the way Django serves its static assets. Every Django app, by default, looks to the <code>templates/</code>* directory within the app for the <code>html</code> template file to serve. This template usually contains <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> tags denoting the location of SCSS and JS files. In Django, these files are usually located inside the <code>static/</code>* directory. Likewise, our frontend app store our templates and static assets within these directories.</p> <p>Despite these similiarties, however, the files in these two directories should never be manipulated by a developer. These files are automatically generated by an application called webpack via configurations in <code>webpack.config.js</code> and <code>.babelrc</code>.</p> <p>The files that should be manipulated by developers are housed within the <code>src/</code> directory. Inside of here are directories for <code>assets/</code>, <code>componenents/</code>, <code>pages/</code>, <code>router</code>, and <code>templates/</code>. Each of these directories contains the files which webpack reads and then bundle into output files for the <code>static/</code> and <code>template/</code> directories.</p>"},{"location":"developer/frontend/#note-the-templates-and-static-directories-contain-within-them-a-frontend-directory-in-order-to-namespace-template-and-static-files-although-this-serves-little-purpose-for-our-project-it-is-a-django-convention-that-prevents-django-from-confusing-the-templates-and-static-directories-from-the-frontend-app-vs-another-app","title":"*Note: The <code>templates/</code> and <code>static/</code> directories contain within them a <code>frontend/</code> directory in order to namespace template and static files. Although this serves little purpose for our project, it is a Django convention that prevents Django from confusing the <code>templates/</code> and <code>static/</code> directories from the frontend app vs another app.","text":""},{"location":"developer/frontend/#overview-of-directories-and-files","title":"Overview of Directories and Files","text":"<ul> <li>frontend/: houses all the frontend files.</li> <li>frontend/src/: houses all the files for developers to manipulate. The files here are read by webpack before being bundled into the <code>static/</code> and <code>templates/</code> directories.</li> <li>assets/: this is where we store all of our miscellaneous files, such as .jpegs, .svgs, .gifs, etc.</li> <li>componenents/: this is where we store the files that generate our components, such as buttons and cards. To learn more about this in-depth, read the components section of this guide.</li> <li>context/: contains the logic and data management utilities related to context providers and consumers. Contexts are used for managing global state within our application, providing a way to pass data through the component tree without having to pass props manually at every level. - COP (Community of Practice) JSON Structure: The COP data represents different communities of practice within our organization, each consisting of various roles and descriptions. Below is the JSON structure of the COP data for QualifierPageRoles.tsx:   <code>{     \"COPs\": {       \"UI/UX\": [         \"UI/UX_Designer\",         \"UX_Researcher\",         \"UX_Writing\",         \"UX_Practice_Lead\"       ],       \"Engineering\": [         \"Back_End_Developer\",         \"Front_End_Developer\",         \"Full_Stack_Developer\",         \"Engineering_Practice_Lead\"       ],       \"Data_Science\": [         \"Data_Scientist\",         \"Data_Analyst\",         \"Data_Engineer\",         \"Data_Science_Practice_Lead\"       ],       \"Project/Product_Management\": [         \"Product_Manager\",         \"Project_Manager\",         \"Business_Analyst\",         \"Product_Owner\",         \"Special_Projects_Coordinator\",         \"Product_Management_Practice_Lead\"       ],       \"DevOps\": [         \"Site_Reliability_Engineer\",         \"Data_Engineer\",         \"Database_Architect\",         \"Security_Engineer\",         \"DevOps_Practice_Lead\"       ]     }   }</code></li> <li>pages/: contains the React files that pools together various components to generate a page.</li> <li>router/: contains the routing logic for the project. It uses the React-Router library.</li> <li>templates/: contains HTML files that are then generated into the regular templates directory. To learn more about how webpack bundle our files, read the webpack section of this guide.</li> <li>index.js: this file serves as the entry point for all other js files*. This file is read by webpack, and then bundled into code in the <code>static</code> directory.</li> <li>index.scss: this file serves as the entry point for all other scss files*.</li> <li>frontend/static/: automatically generated by webpack, DO NOT EDIT</li> <li>frontend/templates/: automatically generated by webpack, DO NOT EDIT</li> <li>tests/: contains our test files. To run these files simply use <code>docker compose run webpack npm run test</code>.</li> <li>.babelrc: Babel's configuration. To learn more about this, please visit babel's documentation.</li> <li>.jest.config.js: Jest's configuration. To learn more about configuring Jest, please visit jest's documentation.</li> <li>package-lock.json &amp; package.json: These files are created by npm to keep track of dependencies. Please visit npm's documentation to understand them.</li> <li>webpack.config.js: webpack's configuration. To learn more about configuring webpack, please visit their documentation. To learn about our specific configuration, see the below guide.</li> </ul>"},{"location":"developer/frontend/#note-this-is-technically-a-lie-in-actuality-indexjs-reads-indexs-as-well-as-the-react-files-making-it-the-only-entryway-for-all-files-bundled-in-the-src-directory","title":"*Note: This is technically a lie. In actuality, index.js, reads index.s as well as the React files, making it the only entryway for all files bundled in the <code>src/</code> directory.","text":""},{"location":"developer/frontend/#components-directory","title":"Components Directory","text":"<pre><code>\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 Basics/\n\u2502       \u251c\u2500\u2500 Colors.scss\n\u2502       \u2514\u2500\u2500 Titles.scss\n\u2502   \u251c\u2500\u2500 Buttons/\n\u2502       \u251c\u2500\u2500 Button.js\n\u2502       \u2514\u2500\u2500 Button.scss\n\u2502   \u251c\u2500\u2500 Cards/\n\u2502       \u251c\u2500\u2500 Cards.js\n\u2502       \u2514\u2500\u2500 Cards.scss\n\u2502   \u2514\u2500\u2500 &lt;Components&gt;/\n</code></pre> <p><p>A closer look at a theoretical expansion of the components directory</p></p> <p>The components directory contains our site components. Each directory in here represents a different class of components, such as <code>Buttons/</code>* or <code>Cards/</code>*. Within these directories are the files necessary that creates these components. Likewise, the special <code>Basics/</code> directory contains small CSS classes that are reused, but not, technically, components, such as text-size or text-colors.</p>"},{"location":"developer/frontend/#note-these-files-are-capitalized-to-follow-react-convention-for-components-when-making-new-components-please-make-sure-to-follow-this-convention-this-convention-is-in-place-to-help-react-differentiate-between-modules-vs-other-types-of-imports","title":"*Note: These files are capitalized to follow React convention for components. When making new components, please make sure to follow this convention. This convention is in place to help React differentiate between modules vs other types of imports.","text":""},{"location":"developer/frontend/#webpack-configurations","title":"Webpack Configurations","text":"<pre><code>...\n\nmodule.exports = {\n    mode: 'development',\n    entry: {\n        index: \"./frontend/src/index.js\"\n    },\n    output: {\n        clean: {\n            keep: '.gitkeep'\n        },\n        filename: '[name].[contenthash].js',\n        path: path.resolve(__dirname, 'frontend/static/frontend'),\n    },\n    devtool: 'inline-source-map',\n    module: {\n        rules: ...\n    },\n    optimization: {\n        moduleIds: 'deterministic',\n        runtimeChunk: 'single',\n        splitChunks: ...\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            filename: '../../templates/frontend/index.html',\n            template: '/frontend/src/templates/index.html',\n        }),\n    ],\n    watchOptions: {\n        ignored: /node_modules/,\n    },\n}\n</code></pre> <p><p>webpack.config.js (truncated)</p></p> <p>Our <code>webpack.config.js</code> file is one of the most important files to understanding how our frontend architecture comes together. Therefore, this section is dedicated to the settings that we have set for this file. Note that we do not explain all the settings, as some can be found and easily deduced from webpack's configuration and guides documentation.</p> <ul> <li>entry: the file that is ultimately read by webpack to bundle everything together. This file, <code>index.js</code> imports all dependencies and files that makes up our product. Note that advanced multiple entry is possible, should we ever need it.</li> <li>output: contains configurations for the files that are generated in the <code>static/</code> directory</li> <li>output &gt; clean &gt; keep: clean is usually used to clear away old files before generating new ones (filenames are variable to force browser css/js recacheing). However, keep notes files that should not be removed*.</li> <li>output &gt; filename: this configures the name of the generated js files. [name] is simply the name of the file noted in the entry configuration, and [contenthash] is a randomly generated string, which forces browser recacheing.</li> <li>output &gt; path: the directory to place the generated file. This directory is the one that Django, by default, detects its static files.</li> <li>optimization: this contains a catch-all for various ways to enhance either development or deployment. For more on our current configuration, read this guide.</li> <li>plugins &gt; HtmlWebpackPlugin: this plugin enables us to dynamically generate templates with the correct <code>&lt;script&gt;</code> and <code>&lt;styles&gt;</code> path by reading the template and outputing it with the path noted by filename. This output path follows Django's default template directory structure.</li> <li>watchOptions &gt; ignored: configures files to ignore when regenerating watched files.</li> </ul>"},{"location":"developer/frontend/#note-the-kept-gitkeep-file-is-there-to-give-an-empty-file-for-git-to-preserve-the-otherwise-empty-directory-when-pushed-onto-github-as-you-might-have-guessed-git-does-not-push-empty-directories","title":"*Note: The kept <code>.gitkeep</code> file is there to give an empty file for git to preserve the otherwise empty directory when pushed onto GitHub. As you might have guessed, git does not push empty directories.","text":""},{"location":"developer/frontend/#why-do-we-separate-babel-from-webpack","title":"Why do we separate Babel from webpack?","text":"<p>If you have explored documentation from webpack, you might learn that the babel-loader in module &gt; rules can accept the settings noted in <code>.babelrc</code>. The reason why we separate these settings into another file is because webpack is not, in theory, the only application that makes use of these settings. Although we have no other apps that makes use of <code>.babelrc</code> at the moment, this can change in the future. Therefore, this separation of files is a form of future proofing.</p>"},{"location":"developer/frontend/#testing","title":"Testing","text":""},{"location":"developer/frontend/#component-testing","title":"Component Testing","text":"<p>Our tests exists inside the tests directory with subdirectories that follows <code>frontend/src</code>. There is also <code>__mock__/</code> which contains code that bypasses certain tricky imports, such as svg or SCSS assets, which are not needed when testing. In order to understand how to write tests, be sure to take a look at the documentation for React Testing Library, the parent DOM Testing Library, and the support libraries jest-dom and user-event.</p> <p>To run these tests, use the command <code>docker compose run webpack npm run test</code> (or with <code>test:w</code> for watch mode). The tests are run through jest, while the other libraries support react testing by providing functions to render DOM elements and simulate user behavior.</p> <p>Note: <code>jest-environment-jsdom</code> is a library that is absolutely required to link jsdom to jest. It provides the classes necessary for jest to interpret the jsdom environment. This information is listed here as it is not listed in jest's or jsdom's docs.</p>"},{"location":"developer/frontend/#accessibility-testing","title":"Accessibility Testing","text":"<p>In addition to testing the functioning of our components, we also test the accessability of it via the library, @axe-core/react. This library prints out accessibility issues onto the browser console, providing accessibiltiy testing once the HTML has fully rendered. That said, the library is known to give both false positives and false negatives. As always reading the official documentation is best when it comes to resolving these errors.</p>"},{"location":"developer/frontend/#additional-resources","title":"Additional Resources","text":"<p>Sass Documentation React Documentation Webpack Documentation @babel/preset-react Documentation React Router Documentation Jest Documentation React Testing Library Documentation @axe-core/react Documentation WAI-ARIA Authoring Practices 1.1</p>"},{"location":"developer/git-branch-structure/","title":"GitHub Repo Branch Structure","text":""},{"location":"developer/git-branch-structure/#summary","title":"Summary","text":"<p>There are three protected branches in our github repo: <code>main</code>, <code>develop</code>, and <code>ava-main-v1</code>.</p> <p>The two core branches we will use to develop with are  <code>main</code> and <code>develop</code>. We will use a multi-branching model to collaborate effectively. You can read more about it here: A successful Git branching model \u00bb nvie.com.</p> <p>The branch <code>ava-main-v1</code> is archived for historical purposes.</p>"},{"location":"developer/git-branch-structure/#what-are-the-main-and-develop-branches","title":"What are the <code>main</code> and <code>develop</code> branches?","text":"<p>The <code>main</code> branch is the core branch in which production code resides. This is the branch that houses the code that will get deployed to the production environment and delivered to real live users. It is extremely important to make sure this branch is 100% functional, tested and bug-free.</p> <p>The <code>develop</code> branch is the branch we use to stage new features and changes to the code, before pushing it to production. We use this branch to test new code inside a staging environment before delivering it to production.</p> <p>Developers should create feature branches off of the <code>develop</code> branch, then make a pull request from that new feature branch into the <code>develop</code> branch. For example: <code>feature/mybutton-component</code> gets branched off <code>develop</code>, worked on in a dev's local machine, then pushed up the origin repo, and finally pull requested back into the <code>develop</code> branch.</p> <p>Once all the new code in the <code>develop</code> branch passed all checks and tests, it should be merged into the <code>main</code> branch. This will finally deliver the new code to end users.</p> <p>If you are still confused, please read the link or watch the youtube video in Additional Resources below for more details. It explains everything much more clearly. Also feel free to ask anyone on the team how it all works.</p>"},{"location":"developer/git-branch-structure/#what-is-the-ava-main-v1-branch","title":"What is the Ava-main-V1 branch?","text":"<p>To understand the branch <code>ava-main-v1</code>, we need a quick background on the history of the CivicTechJobs project for context.</p> <p>Ava Li was the first Technical Project Lead of CivicTechJobs. She initiated the project, and she worked with her team to write all the frontend and backend code. Before she left, she migrated the entire project from plain Python to Poetry. This broke a lot of things in the backend.</p> <p>Jimmy Juarez was the next Technical Project Lead. Since the backend was non functional, Jimmy made the decision to reset the entire Django backend and rebuild it from scratch. This split the codebase from \"Version 1: pre backend reset\", to \"Version 2: post backend reset\".</p> <p>Ava and her team's pre-backend reset code is preserved in the branch <code>ava-main-v1</code>. This way their work is not lost, and if we ever need to implement a feature they already did before, we can always look back and study their code. This is the purpose of <code>ava-main-v1</code>.</p> <p>For example, they had implemented a super linter for Python and Javascript, which does not exist in the current code base. So if we ever want to do that, we can see what they did to deliver it.</p>"},{"location":"developer/git-branch-structure/#additional-resources","title":"Additional Resources","text":"<p>Getting started with branching workflows, Git Flow and GitHub Flow - YouTube A successful Git branching model \u00bb nvie.com</p>"},{"location":"developer/github/","title":"GitHub Architecture","text":"<pre><code>\u251c\u2500\u2500 .github/ # Github\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/\n\u251c\u2500\u2500 app/\n\u2502    \u251c\u2500\u2500 config/\n\u2502          \u2514\u2500\u2500 settings.py\n\u2502    \u251c\u2500\u2500 frontend/\n\u2502    \u251c\u2500\u2500 server/\n\u2502    \u251c\u2500\u2500 .babelrc\n\u2502    \u251c\u2500\u2500 manage.py\n\u2502    \u251c\u2500\u2500 requirements.txt\n\u2502    \u251c\u2500\u2500 package.json\n\u2502    \u251c\u2500\u2500 package-lock.json\n\u2502    \u2514\u2500\u2500 vite.config.mts\n\u251c\u2500\u2500 dev/\n\u2502    \u251c\u2500\u2500 django.dockerfile\n\u2502    \u251c\u2500\u2500 vite.Dockerfile\n\u2502    \u2514\u2500\u2500 dev.env\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore # Github\n\u251c\u2500\u2500 jsconfig.json\n\u251c\u2500\u2500 CONTRIBUTING.md # Github\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 LICENSE # Github\n\u2514\u2500\u2500 README.md # Github\n</code></pre> <p><p>Overall project structure</p></p> <pre><code>\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md/\n</code></pre> <p><p>GitHub structure</p></p>"},{"location":"developer/github/#summary","title":"Summary","text":""},{"location":"developer/github/#overview-of-directories-and-files","title":"Overview of Directories and Files","text":"<ul> <li>LICENSE:</li> <li>README.md:</li> </ul>"},{"location":"developer/github/#github-actions","title":"GitHub Actions","text":""},{"location":"developer/github/#additional-resources","title":"Additional Resources","text":""},{"location":"developer/installation/","title":"Installation Instructions","text":"<p>This guide runs through the steps needed to create and run a local version of our project.</p> <p>If you are ever stuck or need clarification, you can contact our team members or the development lead through our Slack or email, and schedule a pair programming session with one of our developers. All of us have been through these steps, and am more than happy to help. By helping you, we can better improve our documentation and grow this project!</p>"},{"location":"developer/installation/#required-downloads","title":"Required Downloads","text":"<p>Git - Windows - macOS - Linux/Unix Docker - Windows - macOS - Linux/Unix Prettier - VSCode Extension</p> <p>It is also recommended to install Python, Poetry, Node.js, and NPM in order to do things outside of Docker.</p> Note on macOS The macOS version of git involves downloading extra programs, such as Homebrew. In some cases this program can run up to 8GB of storage space, which might be too much for some. In that scenario, a miniature version of Homebrew can be installed through XCode. But do be warned that the containers for our project takes up a substantial amount of disk space as well. Do consider freeing up your disk space by deleting or backing up unneeded files, like photos or videos, and delete programs that are no longer useful. Your OS's native disk cleaner can also clear out unused cache files.  <p></p>"},{"location":"developer/installation/#environmental-setup","title":"Environmental Setup","text":"<ol> <li>Fork our repository.</li> <li>Clone our repository to a local version on your PC.</li> <li>Configuring Git to sync your fork with the original repository. When configuring, make sure to not blindly copy and paste the commands without making appropriate edits, especially when it involves your username or the repository name.</li> </ol> <p>While developing, make sure to create new branches off of the <code>develop</code> branch. To checkout the <code>develop</code> branch into your local repository, you can do the following:</p> <ol> <li>Navigate to the root of our directory, <code>CivicTechJobs/</code>, in the terminal.</li> <li>Run <code>git remote add upstream https://github.com/hackforla/CivicTechJobs.git</code> - this command adds the original hackforla CivicTechJobs github repo as a remote to your local repository and names it \"upstream\".</li> <li>Run <code>git fetch upstream develop</code> - this command fetches the <code>develop</code> branch.</li> <li>Run <code>git checkout -b develop upstream/develop</code> - this command creates and checks out a new branch called \"develop\" that tracks the upstream <code>develop</code> branch.</li> </ol>"},{"location":"developer/installation/#running-docker","title":"Running Docker","text":"<ol> <li>Navigate to the root of our directory, <code>CivicTechJobs/</code>, in the terminal.</li> <li>In <code>dev/</code>, create a file named, <code>dev.env</code>.</li> <li>In this newly created file, copy and paste the contents of <code>dev.env.example</code>. Afterwards, you must edit the lines specified below.</li> <li>Move to the frontend directory <code>cd frontend</code> and then <code>npm install</code>. When this is finished, move back to the root directory <code>cd ..</code></li> <li>Finally, enter <code>docker compose up --watch</code> to run the local server.</li> <li>In a browser, visit <code>http://localhost:5175</code> and you should see the front page of our website!</li> <li>Use <code>http://localhost:8000</code> to test the backend django server.</li> </ol> dev.env lines to edit <ul> <li>POSTGRES_DB: a name for your database, such as `postgres`</li> <li>POSTGRES_USER: a username for your database</li> <li>POSTGRES_PASSWORD: a password for your database</li> <li>SECRET_KEY: a random string of length 50. You can use your favorite secret key generator to achieve this. To learn more about how Django generate default keys, see [Python's secrets's library](https://docs.python.org/3/library/secrets.html#secrets.token_urlsafe).</li> <li>SQL_DATABASE: same as POSTGRES_DB</li> <li>SQL_USER: same as POSTGRES_USER</li> <li>SQL_PASSWORD: same as POSTGRES_PASSWORD</li> </ul> <p>In development mode, our frontend and backend dev servers are split into two separate processes. The React frontend is hosted on <code>localhost:5175</code>, and the django backend API server is hosted on <code>localhost:8000</code>. Docker compose sets the two dev servers up so that they can communicate to each other.</p>"},{"location":"developer/installation/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>This section might answer some of the burning questions you have. If you cannot find it here, be sure to contact our team members or the development lead through our Slack or email.</p>"},{"location":"developer/installation/#troubleshooting-errors","title":"Troubleshooting Errors","text":""},{"location":"developer/installation/#1-the-command-docker-could-not-be-found","title":"1. The command 'docker' could not be found","text":"<p>Make sure to turn on Docker by opening the Docker program on your desktop.</p>"},{"location":"developer/installation/#2-docker-error-unknown-flag-watch","title":"2. Docker error: 'unknown flag: --watch'","text":"<p>The <code>--watch</code> flag enables hot module reloads during development. This flag requires a later version of Docker Compose(2.22.0). If you are running into issues or getting errors running <code>docker compose up --watch</code>, please make sure you have installed the latest version of Docker and Docker Desktop on your machine.</p>"},{"location":"developer/installation/#3-cant-find-a-suitable-configuration-file-in-this-directory-or-any-parent-not-found","title":"3. can't find a suitable configuration file in this directory or any parent: not found","text":"<p>Make sure that your terminal location is in a directory with a <code>docker-compose.yml</code> file. And make sure that the file is not hidden.</p>"},{"location":"developer/installation/#4-code-err_socket_timeout","title":"4. code ERR_SOCKET_TIMEOUT","text":"<p>This can result for several reasons, such as having your sockets overloaded. In order to prevent this, the best thing to do is to lower the amount of sockets used when performing npm install. Change this line in <code>dev/vite.Dockerfile</code>:</p> <p><code>RUN npm install</code></p> <p>to:</p> <p><code>RUN npm install --maxsockets=1</code></p> <p>This should allow <code>docker compose up</code> to work. Be sure to delete the addition once your image and container is set up.</p>"},{"location":"developer/installation/#5-dependency-not-found","title":"5. [dependency] not found","text":"<p>This sometimes happen when npm did not install successfully. In this scenario, you need to manually install the dependencies inside the container. Generally the command to run a command inside a container is:</p> <p><code>docker compose run [container name] [command to run in container]</code></p> <p>In this scenario, the full command would be:</p> <p><code>docker compose run vite npm install</code></p>"},{"location":"developer/installation/#6-webpack-cli-error-eacces-permission-denied-open-codefrontendtemplatesfrontendindexhtml","title":"6. [webpack-cli] [Error: EACCES: permission denied', open '/code/frontend/templates/frontend/index.html']","text":"<p>In this case, the <code>index.html</code> file has incorrect ownership and/or permissions. To fix this, run the following command in the root directory of the CTJ repository:</p> <p><code>sudo chown -R $USER:$USER</code></p> <p>This will utilize superuser permissions to change the user and group ownership of all the files and directories in the current directory to the current user.</p>"},{"location":"developer/installation/#additional-resources","title":"Additional Resources","text":"<p>Git Documentation Docker Documentation Quickstart Guide Frontend Architecture Backend Architecture DevOps Architecture GitHub Architecture</p>"},{"location":"developer/mkdocs-architecture/","title":"MKdocs Architecture","text":"<pre><code>\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 mkdocs-build.yml # Docs\n\u251c\u2500\u2500 backend/\n\u251c\u2500\u2500 dev/\n\u251c\u2500\u2500 frontend/\n\u251c\u2500\u2500 mkdocs/ # Docs\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docker-compose.docs.yml # Docs\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre> <p><p>Overall project structure</p></p> <pre><code>\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u251c\u2500\u2500 developer/\n\u2502   \u251c\u2500\u2500 joining-the-team/\n\u2502   \u251c\u2500\u2500 js/\n\u2502   \u2514\u2500\u2500 misc/\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 resources.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre> <p><p>mkdocs directory structure</p></p>"},{"location":"developer/mkdocs-architecture/#summary","title":"Summary","text":"<p>The MkDocs \"sub-project\" lives in the <code>mkdocs/</code> folder. A development server can be run using the <code>docker-compose.docs.yml</code> compose script. The mkdocs is set to automatically deploy to github pages using the <code>mkdocs-build.yml</code> github action.</p>"},{"location":"developer/mkdocs-architecture/#docker-mkdocs","title":"Docker MkDocs","text":"<p>It is important to note that we are using Hack for LA's prebuilt docker mkdocs image for convenient setup. Please see the resources below for more information:</p> <ul> <li>Hack for LA - docker-mkdocs repo</li> <li>Hack for LA - docker-mkdocs documentation</li> <li>Hack for LA - docker-mkdocs dockerhub image</li> </ul> <p>This prebuilt docker image makes it easy to get a mkdocs development server running with one command, without having to install python or mkdocs dependencies on your local machine. It also includes common useful plugins that we dont have to worry about installing ourselves, and already includes the <code>mkdocs-material</code> theme pre-installed.</p> <p>Our project implements the HFLA mkdocs image by pulling it inside the <code>docker-compose.docs.yml</code> file:</p> <pre><code>name: civic-tech-jobs-mkdocs\n\nservices:\n  mkdocs:\n    container_name: mkdocs\n    image: hackforlaops/mkdocs:latest\n    command: mkdocs serve -a \"0.0.0.0:8005\"\n    ports:\n      - \"8005:8005\"\n    volumes:\n      - ./mkdocs:/app\n    develop:\n      watch:\n        - action: sync\n          path: ./mkdocs\n          target: /app\n</code></pre> <p>Now when we run docker compose up like so:</p> <pre><code>docker-compose -f docker-compose.docs.yml up --watch\n</code></pre> <p>A mkdocs development server is started on <code>http://localhost:8005</code></p>"},{"location":"developer/mkdocs-architecture/#mkdocs-deployment","title":"MkDocs Deployment","text":"<p>The url for the github pages site is: <code>https://hackforla.github.io/CivicTechJobs/</code> (the website you are reading this on right now).</p> <p>Our github repo is set to publish the docs to Github Pages using the <code>gh-pages</code> branch. This setting can be configured in the project's Pages settings.</p> <p>External Resources:</p> <ul> <li>MkDocs Documentation | deployment instructions</li> <li>Github Pages documentation</li> </ul> <p>Relevant PR and Issue:</p> <ul> <li>Fix mkdocs deployment #456</li> <li>Feat/fix mkdocs #592</li> </ul> <p>The docs are set to automatically deploy to github pages using the <code>mkdocs-build.yml</code> github action. This action builds the mkdocs and saves the static files into the <code>gh-pages</code> branch.</p>"},{"location":"developer/mkdocs-architecture/#github-action-for-mkdocs-deployment","title":"Github Action for mkdocs deployment","text":"<p>Links to the github action: Build MkDocs site</p> <pre><code>name: Build MkDocs site\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"mkdocs/**/**.md\"\n      - \"mkdocs/mkdocs.yml\"\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\njobs:\n  deploy-docs:\n    runs-on: ubuntu-latest\n    if: github.actor != 'github-actions[bot]'\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV\n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - name: Install Dependencies\n        run: pip install \\\n          mkdocs-material==9.1.17 \\\n          mkdocs-autolinks-plugin==0.7.1\n      - name: Publish docs\n        run: |\n          cd mkdocs\n          mkdocs gh-deploy --force\n</code></pre> <p>Workflow Overview</p> <ul> <li><code>name: Build MkDocs site</code> - The name of this workflow is \"Build MkDocs site.\"</li> <li><code>on: push: - main</code> - The workflow is triggered when there\u2019s a push to the <code>main</code> branch.</li> <li><code>paths: ...</code> - The workflow will only run if the files being pushed are Markdown files (<code>.md</code>) or the <code>mkdocs.yml</code> configuration file inside the mkdocs directory.</li> <li><code>workflow_dispatch:</code> - This allows manual triggering of the workflow via the GitHub Actions interface.</li> <li><code>permissions: contents: write</code> - This grants the action permission to write contents to the repository. It's needed for deploying the site, which requires pushing to the <code>gh-pages</code> branch.</li> <li><code>runs-on: ubuntu-latest</code> - This specifies that the job will run on the latest Ubuntu environment provided by GitHub Actions.</li> <li><code>if: github.actor != 'github-actions[bot]'</code> - This condition ensures that the job doesn\u2019t trigger if the GitHub Actions bot is the one making the changes. This prevents infinite loops where the action keeps triggering itself.</li> <li><code>uses: actions/checkout@v4</code> - This step checks out the repository code so the workflow can access the files.</li> <li><code>run: git config user.name github-actions[bot]</code> - Configures Git to use the <code>github-actions[bot]</code> user for any commits or pushes that may happen during the deployment.</li> <li><code>git config user.email 41898282+github-actions[bot]@users.noreply.github.com</code> - Sets the email for the github-actions[bot] user.</li> <li><code>uses: actions/setup-python@v5</code> - This sets up a Python environment in the GitHub runner, which is necessary for installing and running MkDocs.</li> </ul> <p>Set environment variable for caching</p> <ul> <li><code>run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV</code></li> <li>This step sets an environment variable called <code>cache_id</code> to the current week of the year (<code>%V</code>). This value will be used as the key for caching to ensure that the cache is updated weekly.</li> </ul> <p>Cache dependencies</p> <ul> <li><code>uses: actions/cache@v4</code> - This step caches dependencies (to speed up future builds) in the .cache directory.</li> <li><code>with: key: mkdocs-material-${{ env.cache_id }}</code> - The cache key is based on the cache_id, so the cache is refreshed weekly.</li> <li><code>path: .cache</code> - Specifies that the cache should be stored in the .cache directory.</li> <li><code>restore-keys: mkdocs-material-</code> - This allows for fallback caching if an exact cache match is not found.</li> </ul> <p>Install Dependencies</p> <ul> <li><code>run: pip install mkdocs-material==9.1.17 mkdocs-autolinks-plugin==0.7.1</code></li> <li>This installs the necessary dependencies for MkDocs to work. In this case:</li> <li><code>mkdocs-material==9.1.17</code>: A popular theme for MkDocs.</li> <li><code>mkdocs-autolinks-plugin==0.7.1</code>: A plugin that automatically creates links between pages in your documentation based on their titles.</li> </ul> <p>Publish Documentation</p> <ul> <li><code>run: cd mkdocs &amp;&amp; mkdocs gh-deploy --force</code></li> <li>first it changes to the <code>mkdocs/</code> directory.</li> <li>then it deploys the MkDocs site to GitHub Pages using <code>mkdocs gh-deploy --force</code>. The <code>--force</code> flag ensures that the contents of the GitHub Pages branch (<code>gh-pages</code>) are overwritten with the latest deployment.</li> </ul>"},{"location":"developer/mkdocs-architecture/#summary_1","title":"Summary","text":"<p>This workflow automates the process of building and deploying a MkDocs site when changes are pushed to the <code>main</code> branch. It does the following:</p> <ol> <li>Checks out the repository and configures Git for pushing changes.</li> <li>Sets up Python and installs the necessary MkDocs dependencies.</li> <li>Caches dependencies to speed up future builds.</li> <li>Deploys the site to GitHub Pages using mkdocs <code>gh-deploy</code>.</li> </ol> <p>This workflow ensures the documentation is always up to date and available on GitHub Pages whenever changes are made to relevant Markdown files or the MkDocs configuration.</p>"},{"location":"developer/mkdocs-edit-instructions/","title":"How to Publish new Documentation","text":"<p>The goal of this page is to document how to create and publish new changes to the CTJ documentation.</p> <p>Writing documentation into mkdocs requires some knowledge of Markdown.</p>"},{"location":"developer/mkdocs-edit-instructions/#making-changes-to-the-mkdocs","title":"Making changes to the mkdocs","text":"<p>What you essentially need to know:</p> <ul> <li>To make changes to the docs, edit the <code>.md</code> files located in the <code>mkdocs/docs/</code> folder.</li> <li>To make a new page, create a new <code>.md</code> file in the appropriate folder.</li> <li>To add or edit links in the navmenu, configure the <code>mkdocs.yml</code> file.</li> </ul> <p>MkDocs provides a development server that makes it convenient to see your changes in <code>localhost</code> before you deploy them to github.</p> <p>For more a detailed editing guide please see the official MkDocs Tutorial</p>"},{"location":"developer/mkdocs-edit-instructions/#quickstart","title":"Quickstart","text":"<p>To start the development server, simply go to the root of your project in the terminal and run the following command:</p> <pre><code>docker-compose -f docker-compose.docs.yml up --watch\n</code></pre> <p>Next, go to <code>http://localhost:8005</code> in your browser.</p> <p>Now when you save new changes to the <code>.md</code> files, the respective page will automatically be updated in the browser.</p> <p>When you are done editing, the next step is to deploy your changes.</p>"},{"location":"developer/mkdocs-edit-instructions/#deploying-your-changes","title":"Deploying your changes","text":"<p>When you are satisfied with your edits, make a pull request so that they can be reviewed.</p> <p>Once the pull request is approved and the code is merged into the <code>main</code> branch, the changes will be automatically deployed to the official CivicTechJobs documentation site (the site you are reading this page in right now). That's it!</p> <p>If anything goes wrong, you can investigate the workflow in the project's github actions page</p> <p>Check out our MkDocs Architecture page for more details on how it all fits together.</p>"},{"location":"developer/mkdocs-edit-instructions/#recap","title":"Recap","text":"<p>To sum it all up, you can make changes in 4 easy steps:</p> <ol> <li>Start the development server using <code>docker-compose -f docker-compose.docs.yml up --watch</code></li> <li>Make changes to the <code>.md</code> files and observe them in <code>http://localhost:8005</code></li> <li>Open a Pull Request with your new changes</li> <li>Merge the Pull Request into the <code>main</code> branch</li> </ol>"},{"location":"developer/mkdocs-guide/","title":"MkDocs - Documentation Guide","text":"<p>We are using mkdocs to handle documentation.</p> <p>Developers should document their architectural and coding decisions, so that other team members can easily reference these docs whenever they are lost or confused or new to the project.</p>"},{"location":"developer/mkdocs-guide/#what-is-mkdocs","title":"What is MKdocs?","text":"<p>MkDocs is a static site generator that is designed specifically for building project documentation. It allows you to write documentation using Markdown, a lightweight markup language that's easy to use, and generates a clean, professional website that can be hosted on our project's GitHub Pages.</p> <p>Please see MkDocs - How to Edit for instructions on how to make changes to the CTJ documentation and publish new docs.</p>"},{"location":"developer/mkdocs-guide/#what-should-developers-document","title":"What should developers document?","text":"<p>Code functionality</p> <ul> <li>Document the purpose and functionality of the code you write. Describe what each module, class, or function does, especially if it might not be obvious at first glance.</li> <li>Example: If you implement a new API endpoint, document what the endpoint does, the request and response formats, and any important business logic involved.</li> </ul> <p>Setup Instructions</p> <ul> <li>Make sure to document how to set up the project or new features you add. Include all dependencies, environment variables, and steps to get the project running locally or in production.</li> <li>Example: If you introduce a new tool like Docker or a new package, make sure to document how to install and configure it.</li> </ul> <p>Common Use Cases</p> <ul> <li>Document common or important use cases for the code. This is especially useful for other developers who might use your code in the future.</li> <li>Example: If you build a new utility or library, include examples showing how it should be used.</li> </ul> <p>Troubleshooting</p> <ul> <li>Include a section for common issues and how to resolve them. This can be a lifesaver for both new developers and anyone maintaining the project.</li> <li>Example: Document errors or challenges you faced during development and their solutions.</li> </ul> <p>Code Examples</p> <ul> <li>Where applicable, provide sample code or snippets to explain usage. These examples help future developers quickly understand how to use your components or functions.</li> <li>Example: If you write a custom hook in React, include an example of how it can be used in a component.</li> </ul> <p>API Documentation</p> <ul> <li>Ensure that all APIs (REST or GraphQL) have detailed documentation on endpoints, parameters, return types, and possible error codes.</li> <li>Example: For each API endpoint, include descriptions of what it does, what data it expects, and the structure of its responses.</li> </ul>"},{"location":"developer/mkdocs-guide/#what-are-best-practices-for-documentation","title":"What are best practices for documentation?","text":"<ul> <li>Keep it updated and consistent.</li> <li>Be clear and concise.</li> <li>Write in simple terms.</li> <li>Use examples.</li> </ul>"},{"location":"developer/quickstart-guide/","title":"Quickstart Guide","text":"<p>This is a quickstart guide with instructions for how to get the various environments of the application up and running on your machine.</p> <p>Before doing any of these, make sure to first follow the Installation Instructions.</p>"},{"location":"developer/quickstart-guide/#how-to-run-the-app-in-development-mode","title":"How to run the app in development mode","text":"<p>First, make sure that <code>dev.env</code> is in the <code>dev</code> folder with the correct variables.</p> <p>Start the application in development mode:</p> <pre><code>docker compose up --watch\n</code></pre> <p>Test client with this URL:</p> <pre><code>http://localhost:5175\n</code></pre> <p>Test server with these URLs:</p> <pre><code>http://localhost:8000/api/opportunities/\n\nhttp://localhost:8000/api/healthcheck\n</code></pre> <ul> <li>If you request a non-existent api endpoint, eg. <code>localhost:8000/api/asdf</code>, it should return an API error response JSON:<ul> <li><code>{\"error\": \"API endpoint not found\", \"status_code\": 404, \"message\": \"The requested API endpoint does not exist\"}</code></li> </ul> </li> </ul>"},{"location":"developer/quickstart-guide/#run-the-app-in-dev-mode-without-docker","title":"Run the app in dev mode without Docker","text":"<p>Make sure you have python, poetry, node.js, and npm installed on your machine.</p> <p>Steps to run the backend without docker:</p> <ol> <li>In a terminal, navigate to the backend folder with <code>cd backend</code>.</li> <li>Inside this folder, run the backend dev server start command below.</li> <li>The server should be running on <code>localhost:8000</code> now.</li> </ol> <p>Backend dev server start command:</p> <pre><code>poetry run python manage.py runserver localhost:8000\n</code></pre> <p></p> <p>Steps to run the frontend without docker:</p> <ol> <li>In a separate terminal, navigate to the frontend folder with <code>cd frontend</code>.</li> <li>Inside this folder, run the frontend dev server start command below.</li> <li>The client dev server should be running on <code>localhost:5175</code> now.</li> </ol> <p>Frontend dev server start command:</p> <pre><code>npm run dev\n</code></pre>"},{"location":"developer/quickstart-guide/#local-django-admin-url-and-credentials","title":"Local Django ADMIN url and credentials","text":"<p>Use the below to log in to your local django server admin portal:</p> <pre><code>http://localhost:8000/admin/\n</code></pre> <ul> <li>This should work with and without docker</li> </ul> <p>Create an admin user with: </p> <pre><code>python manage.py createsuperuser\n</code></pre> <ul> <li>It will prompt you to enter a username, email, and password to create an admin user. Make sure to write these down</li> <li>You can now use these credentials to log into your local server's admin portal.</li> <li>These credentials are saved into your local postgres instance database, so if this data ever gets deleted or reset, you will have to create an admin user again.</li> <li>Reference: Writing your first Django app, part 2 | Django documentation | Django</li> </ul>"},{"location":"developer/quickstart-guide/#mkdocs","title":"Mkdocs","text":"<p>Start mkdocs development server:</p> <pre><code>docker compose -f docker-compose.docs.yml up --watch\n</code></pre> <ul> <li>Test with: <code>http://localhost:8005/CivicTechJobs/</code></li> </ul>"},{"location":"developer/quickstart-guide/#backend-linting-script","title":"Backend - Linting script","text":"<p>Run these commands inside the <code>/backend</code> folder, in the following order:</p> <pre><code>poetry install\npoetry run isort .\npoetry run black .\npoetry run flake8\n</code></pre> <ul> <li>These should ideally be run before making a PR</li> <li><code>isort</code>: sorts the import statements</li> <li><code>black</code>: automatically formats python code</li> <li><code>flake8</code>: lints python code</li> </ul>"},{"location":"developer/quickstart-guide/#staging-environment","title":"Staging environment","text":"<p>You can view the staging deployment with the following URL: https://stage.civictechjobs.org/</p> <p>How to run the stage environment locally:</p> <ol> <li>Make sure you have a <code>stage.env</code> file inside the <code>/stage</code> folder of your local repository. It should be configured with the correct variables.</li> <li>Run the staging environment in your local machine:</li> </ol> <pre><code>docker compose -f docker-compose.stage.yml up\n</code></pre> <p>Notes: - Feature: Set up stage environment in docker by LoTerence \u00b7 Pull Request #613 \u00b7 hackforla/CivicTechJobs \u00b7 GitHub</p>"},{"location":"joining-the-team/content-writer/","title":"Content Writer","text":"<p>DRAFT NOT YET FILLED OUT</p>"},{"location":"joining-the-team/content-writer/#content-writer","title":"Content Writer","text":"<ol> <li> <p>Review existing copy on the CivicTechJobs.</p> </li> <li> <p>Review the Figma for pages that are not yet published.</p> </li> <li> <p>Review the Project Board and identify an actionable backlog item.</p> </li> <li> <p>Communicate with PM your interest in being assigned a task.</p> </li> </ol>"},{"location":"joining-the-team/data-scientist/","title":"Data Scientist","text":"<p>DRAFT NOT YET FILLED OUT</p>"},{"location":"joining-the-team/data-scientist/#data-scientist","title":"Data Scientist","text":"<ol> <li> <p>Read the Readme.</p> </li> <li> <p>Review the Project Board and identify an actionable backlog item. We are working to resolve some database architecture issues and are not onboarding new data scientist at this time.</p> </li> <li> <p>Communicate with the PM on your interest in being assigned a task.</p> </li> </ol>"},{"location":"joining-the-team/intro/","title":"Intro","text":"<p>Welcome to the Civic Tech Jobs team! This guide will help you get up to speed with everything you need to know to get started as a project team member.</p>"},{"location":"joining-the-team/intro/#lets-go","title":"Let's go!","text":"<ol> <li>Before proceeding, please confirm that you have reviewed and completed the steps outlined in Hack for LA\u2019s Guide for New Volunteers</li> <li>Read Introduction to the Project if you haven't already read it.</li> <li>Check the Community of Practice -&gt; Open Roles for current open roles in the Civic Tech Jobs project. Please follow the steps outlined in the respective open role issue. </li> <li>Attend our monthly all team meeting on the third Tuesday at 5pm PST. You can find the link pinned in our Civic Tech Jobs slack channel.</li> </ol>"},{"location":"joining-the-team/intro/#who-are-you","title":"Who are you?","text":"<p>Click the link that applies to you to find a sequence of immediate action steps:</p> <p>Web Developer</p> <p>UI/UX Designer</p> <p>UI/UX Researcher</p> <p>Product Manager/Owner</p> <p>Other Volunteer</p>"},{"location":"joining-the-team/intro/#accessibility-standards","title":"Accessibility standards","text":"<p>Title III of the Americans with Disabilities Act (ADA) requires that all sites be accessible to people with disabilities. The World Wide Web (W3C) Consortium's Web Content Accessibility Guidelines (WCAG) 2.0 Level AA function as the current legal standard for site accessibility.</p> <p>Get acquainted with accessibility: https://www.ada.gov/pcatoolkit/chap5toolkit.htm</p>"},{"location":"joining-the-team/other-volunteer/","title":"Other Volunteer","text":"<p>DRAFT NOT YET FILLED OUT</p>"},{"location":"joining-the-team/other-volunteer/#other-volunteer","title":"Other Volunteer","text":"<ol> <li> <p>Get an overview of the project from the Wiki.</p> </li> <li> <p>Review the Project Board.</p> </li> <li> <p>Chat with a [INSERT PROJECT NAME HERE] PM to discuss your interest and background.</p> </li> </ol>"},{"location":"joining-the-team/product-manager/","title":"Project Manager","text":"<p>DRAFT NOT YET FILLED OUT</p>"},{"location":"joining-the-team/product-manager/#product-manager-and-owner","title":"Product Manager and Owner","text":"<p>Each of the resources below can be considered a work-in-progress. These resources will evolve and adapt as the team and team needs change. Feel free to open an issue with a link to whichever resource needs improvement and a description of the suggested change.</p> <ol> <li> <p>Learn how we setup our GitHub Kanban boards and please comment if there is anything in the document that is unclear.</p> </li> <li> <p>This Software Development Lifecycle Diagram is a sample of what the process is generally like at Hack for LA and each project is different.</p> </li> <li> <p>Communicate with other product team members and leadership to discuss project priorities and strategic direction.</p> </li> <li> <p>Review the Project Board and the Product Management issues available on that board to identify an actionable backlog item.</p> </li> <li> <p>Review Hack for LA Product Management Templates.</p> </li> <li> <p>Review our OKRS.</p> </li> </ol>"},{"location":"joining-the-team/uiux-designer/","title":"UI/UX Designer","text":""},{"location":"joining-the-team/uiux-designer/#starting-checklist","title":"Starting Checklist","text":"<ol> <li> <p>Review the UI/UX issues on the Project Management Board and identify an actionable backlog item.</p> </li> <li> <p>Communicate with the UI/UX Design Team Lead about your interest in being assigned a task.</p> </li> </ol>"},{"location":"joining-the-team/uiux-designer/#additional-reading","title":"Additional Reading","text":"<ol> <li> <p>This is a generic software development lifecycle diagram for Hack for LA. We would like to talk to you about how this project is different.</p> </li> <li> <p>Read about WCAG 2.0 accessibility standards.</p> </li> </ol>"},{"location":"joining-the-team/uiux-researcher/","title":"UI/UX Researcher","text":""},{"location":"joining-the-team/uiux-researcher/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Review the UI/UX issues on the Project Management Board and identify an actionable backlog item.</p> </li> <li> <p>Communicate with the UI/UX Research Team Lead about your interest in being assigned a task.</p> </li> </ol>"},{"location":"joining-the-team/uiux-researcher/#research-documents","title":"Research Documents","text":"<ul> <li>Completed Research</li> <li>In Progress Research</li> <li>Researching being audited</li> <li>WIKI Template for Research</li> </ul>"},{"location":"joining-the-team/web-developer/","title":"Web Developer","text":""},{"location":"joining-the-team/web-developer/#starting-checklist","title":"Starting Checklist","text":"<ol> <li> <p>Read the development Readme and the CONTRIBUTING.md file set up your development environment. </p> </li> <li> <p>After setting up your enviornment, review the project board by the type of issue you are looking for. The Frontend Coding Project Board or the Backend Coding Project Board. Or you can check out the entire project board here.</p> </li> <li> <p>Communicate with the Developer Team Lead about your interest in being assigned a task.</p> </li> <li> <p>Your first commit will likely be an issue labeled good first issue. Check the board for those issues. Don't worry if you don't see anything now, we are working on it.</p> </li> </ol>"},{"location":"joining-the-team/web-developer/#our-tech-stack","title":"Our Tech Stack","text":""},{"location":"joining-the-team/web-developer/#languages-typescript-python-scss-javascript-dockerfile-shell-html-makefile-css","title":"Languages: TypeScript, Python, SCSS, JavaScript, Dockerfile, Shell, HTML, Makefile, CSS","text":""},{"location":"joining-the-team/web-developer/#technologies-react-express-nodejs-docker-postgresql-django-figma","title":"Technologies: React, Express, Node.JS, Docker, PostgreSQL, Django, Figma","text":""},{"location":"joining-the-team/web-developer/#additional-reading","title":"Additional Reading","text":"<ol> <li> <p>Read about WCAG 2.0 accessibility standards and set up third-party tools for compliance testing.</p> </li> <li> <p>Review notes on security updates.</p> </li> <li> <p>Site architecture document is coming soon.</p> </li> </ol>"},{"location":"misc/ada-guide/","title":"ADA Guide","text":"<p>DRAFT NOT YET FILLED OUT</p>"},{"location":"misc/ada-guide/#ada-guide","title":"ADA Guide","text":""},{"location":"misc/ada-guide/#which-accessibility-testing-tool-should-you-use","title":"Which accessibility testing tool should you use?","text":""},{"location":"misc/ada-guide/#overview","title":"Overview","text":"<p>There are more than 100 accessibility testing tools. Figuring out which ones to use can be a black hole. For guidance we recommend this article: Which accessibility testing tool should you use?</p>"},{"location":"misc/ada-guide/#summary-of-article","title":"Summary of Article","text":"<p>The author recommends using the tools in the following order fixing as you go along, since no one tool catches all the relevant issues</p> <p>aXe SiteImprove Tenon WAVE Lighthouse</p> <p>But if you want to test your site with other tools, here is a bigger list</p>"},{"location":"misc/glossary/","title":"Glossary","text":"<p>DRAFT NOT YET FILLED OUT</p>"},{"location":"misc/glossary/#glossary","title":"Glossary","text":"<p>When we have a shiny glossary it will come here.</p> Term Alternate terms Official Link Description"},{"location":"misc/history/","title":"History","text":"<p>How Hack for LA evolved from in person onboarding to remote, and the iterative approach that we have taken to arrive at the need for a dedicated interface to list volunteer opportunities.</p>"},{"location":"misc/history/#pre-covid-times","title":"Pre-Covid times","text":"<p>Hack for LA practiced in person recruiting on onboarding nights. It had its own benefits, like each volunteer felt valued and had agency</p>"},{"location":"misc/history/#2020-mid-2021","title":"2020-mid 2021","text":"<p>The team later moved on to a new process where the open roles on each team were posted on the Hack For LA site. This led to:</p> <ul> <li>Some volunteers contacted teams directly and the teams became responsible for all onboarding, which was inefficient use of time, leading to poor cohesiveness of our org (onboarding conducted differently by various people and projects). And some projects got too many volunteers but not the right skill level. Ultimately this method led to high turnover of volunteers and product managers getting burnt out.</li> <li>Other volunteers attending a Zoom onboarding session (held weekly). In this process the project leads would show up to recruit at the end, but sometimes there would be no one who could fill the domain specific role. This process was also inefficient.</li> </ul>"},{"location":"misc/history/#mid-2021-current","title":"mid 2021- current","text":"<p>Hack for LA moved to a new model where all new volunteer attend onboarding and then join a communities of practice (CoP) and no open roles are posted on the hackforla.org site. These CoPs have volunteer opportunity boards so that when project leads recruit, they can go to a larger group of people who are more likely to be a good fit for the role available. Also CoP leads can help provide coaching if someone is unsure of if they are a good fit. Listings at CoP allow the org to determine if the project is actually ready to receive volunteers.</p> <p>The Hack for LA organization team has now green lighted a project to create a dedicated job board page where volunteers can search and find volunteer opportunities that match their goal and aspirations while still maintaining the involvement of onboarding and CoPs.</p>"},{"location":"misc/our-process/","title":"Our Process","text":"<p>This page has links and details such as links to a spreadsheet with our research, etc. and what order we did things in. But less narrative and mostly links</p>"},{"location":"misc/research-wiki-template/","title":"Template for presenting research on wiki","text":"<pre><code># [Name of Research]\n\n## Research Date:\n\n## Current Status\n\n## Overview Issue #:\n\n## Outstanding task items\n\n## Assets\n\n### Research Plan (including Audience Identification documentation)\n\n### Scripts\n\n### Interview recordings &amp; Transcripts\n\n### Synthesis (Miro or Figjam)\n\n### Presentation of Findings\n\n### Action Items Spreadsheet\n</code></pre>"},{"location":"misc/security-updates/","title":"Security Updates","text":"<p>This project subscribes to GitHub's automated security alerting service. Occasionally the repository home page may have a yellow banner saying \"We have found a potential security vulnerability in one of your dependencies\" and a link to view the security alert. If you see this, please check our issues list to see if anyone has added an issue for fixing this. If not, please create an issue for this problem. If you feel up to it, please assign the issue to yourself and try to fix it. As with any issue, once you have fixed it on your fork of the repository, push the fixes to your fork and then open a pull request to merge this fix into the main repository.</p> <p>GitHub's \"dependabot\" may try to generate an automated pull request to fix this issue. Please do not accept this pull request without verifying that it works by applying the update on your local copy of the site.</p>"},{"location":"misc/the-team/","title":"The Team","text":"Name Role Karen Coronel Product Manager Janis Mollineau Product Manager Nooria Ali Product Manager Lu Feng UX/UI Design Team Lead Rishi Raghu UX/UI Designer Xiaotian Vivian Li UX Research Team Lead Jialing Wang UX Researcher Terence Lo Development Team Lead Bitian Zhang Full Stack Developer Roja Pinnamraju Frontend Developer Ryan Sakuma Software Developer"}]}